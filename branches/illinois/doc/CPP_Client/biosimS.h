// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL_BIOSIMS_H_
#define _TAO_IDL_BIOSIMS_H_

#include "biosimC.h"


#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"
#include "tao/PortableServer/Collocated_Object.h"
#include "tao/PortableServer/ThruPOA_Object_Proxy_Impl.h"
#include "tao/PortableServer/Direct_Object_Proxy_Impl.h"
#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

TAO_NAMESPACE  POA_biosim
{
  TAO_NAMESPACE  idl
  {
    TAO_NAMESPACE  framework
    {
      class BioDriver;
      typedef BioDriver *BioDriver_ptr;
      // Forward Classes Declaration
      class _TAO_BioDriver_ThruPOA_Proxy_Impl;
      class _TAO_BioDriver_Strategized_Proxy_Broker;
      
      class  BioDriver
        : public virtual PortableServer::ServantBase
      {
      protected:
        BioDriver (void);

      public:
        BioDriver (const BioDriver& rhs);
        virtual ~BioDriver (void);


        virtual CORBA::Boolean _is_a (
            const char* logical_type_id,
            CORBA::Environment &ACE_TRY_ENV = 
              TAO_default_environment ()
          );

        virtual void* _downcast (
            const char* logical_type_id
          );

        static void _is_a_skel (
            TAO_ServerRequest &req,
            void *obj,
            void *servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        static void _non_existent_skel (
            TAO_ServerRequest &req,
            void *obj,
            void *servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        static void _interface_skel (
            TAO_ServerRequest &req,
            void *obj,
            void *servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void _dispatch (
            TAO_ServerRequest &req,
            void *_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        ::biosim::idl::framework::BioDriver *_this (
            CORBA::Environment &ACE_TRY_ENV = 
              TAO_default_environment ()
          );

        virtual const char* _interface_repository_id (void) const;

        virtual CORBA::Boolean isPaused (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void isPaused_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual CORBA::Boolean isStarted (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void isStarted_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void spawnSimulation (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void spawnSimulation_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void spawnSimulationTillDead (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void spawnSimulationTillDead_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void spawnSimulationTillN (
            CORBA::Long nTicks
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void spawnSimulationTillN_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void pauseSimulation (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void pauseSimulation_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void endSimulation (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void endSimulation_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual CORBA::Boolean simulationHasStarted (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void simulationHasStarted_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void advanceOneTick (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void advanceOneTick_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void resumeSimulation (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void resumeSimulation_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void setLogging (
            CORBA::Boolean pLogSim
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void setLogging_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual CORBA::Boolean isLogging (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void isLogging_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual void setDriverPauseLength (
            CORBA::Long pDriverPauseLength
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void setDriverPauseLength_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );

        virtual CORBA::Long getDriverPauseLength (
            
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          )) = 0;
        
                static void getDriverPauseLength_skel (
            TAO_ServerRequest &_tao_req,
            void *_tao_obj,
            void *_tao_servant_upcall,
            CORBA::Environment &ACE_TRY_ENV
          );


      };

      
      ///////////////////////////////////////////////////////////////////////
      //               Strategized Proxy Broker Declaration 
      //
      
      class  _TAO_BioDriver_Strategized_Proxy_Broker : public virtual ::biosim::idl::framework::_TAO_BioDriver_Proxy_Broker
      {
      public: 
        _TAO_BioDriver_Strategized_Proxy_Broker (void);
        
        virtual ~_TAO_BioDriver_Strategized_Proxy_Broker (void);
        
        virtual ::biosim::idl::framework::_TAO_BioDriver_Proxy_Impl &select_proxy (
          ::biosim::idl::framework::BioDriver *object,
          CORBA_Environment &ACE_TRY_ENV
        );
      
      private:
        // Helper methods that takes care to create the proxy
        // as soon as their use is necessary.
        void create_proxy (
          int collocation_strategy,
          CORBA::Environment &ACE_TRY_ENV
        );
        
        // Caches the proxy implementations. The proxy implementation
        // are totally stateless, and those can be shared by all the
        // instances of a given IDL interface type.
        ::biosim::idl::framework::_TAO_BioDriver_Proxy_Impl
        *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
        
        TAO_SYNCH_MUTEX mutex_;
        // This funxtion is used to get an handle to the unique instance
        // of the Strategized Proxy Broker that is available for a given
        // interface.
      
      public:
        static _TAO_BioDriver_Strategized_Proxy_Broker *the_TAO_BioDriver_Strategized_Proxy_Broker (void);
      };
      
      
      //
      //            End Strategized Proxy Broker Declaration 
      ///////////////////////////////////////////////////////////////////////
      
      
      ///////////////////////////////////////////////////////////////////////
      //                    ThruPOA  Impl. Declaration
      //
      
      class  _TAO_BioDriver_ThruPOA_Proxy_Impl : 
        public virtual ::biosim::idl::framework::_TAO_BioDriver_Proxy_Impl,
        public virtual TAO_ThruPOA_Object_Proxy_Impl
      {
      public:
        _TAO_BioDriver_ThruPOA_Proxy_Impl (void);
        
        virtual ~_TAO_BioDriver_ThruPOA_Proxy_Impl (void) { }
        
        virtual CORBA::Boolean isPaused (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual CORBA::Boolean isStarted (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual void spawnSimulation (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual void spawnSimulationTillDead (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual void spawnSimulationTillN (
            CORBA_Object *_collocated_tao_target_,
            CORBA::Long nTicks
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual void pauseSimulation (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual void endSimulation (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual CORBA::Boolean simulationHasStarted (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual void advanceOneTick (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual void resumeSimulation (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual void setLogging (
            CORBA_Object *_collocated_tao_target_,
            CORBA::Boolean pLogSim
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual CORBA::Boolean isLogging (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual void setDriverPauseLength (
            CORBA_Object *_collocated_tao_target_,
            CORBA::Long pDriverPauseLength
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        virtual CORBA::Long getDriverPauseLength (
            CORBA_Object *_collocated_tao_target_
          )
          ACE_THROW_SPEC ((
            CORBA::SystemException
          ));
        
        
      };
      
      //
      //                ThruPOA  Proxy Impl. Declaration
      ///////////////////////////////////////////////////////////////////////
      
      
    }
    TAO_NAMESPACE_CLOSE // module biosim::idl::framework

  }
  TAO_NAMESPACE_CLOSE // module biosim::idl

}
TAO_NAMESPACE_CLOSE // module biosim

#include "biosimS_T.h"

#if defined (__ACE_INLINE__)
#include "biosimS.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#endif /* ifndef */
