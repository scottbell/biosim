// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#ifndef _TAO_IDL_BIOSIMS_CPP_
#define _TAO_IDL_BIOSIMS_CPP_

#include "biosimS.h"

#include "tao/PortableServer/Object_Adapter.h"
#include "tao/PortableServer/Operation_Table.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/PICurrent.h"
#include "tao/PortableServer/ServerRequestInfo.h"
#include "tao/PortableServer/ServerInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#include "ace/Dynamic_Service.h"
#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "biosimS.i"
#endif /* !defined INLINE */

static const TAO_operation_db_entry biosim_idl_framework_BioDriver_operations [] = {
  {"isPaused", &POA_biosim::idl::framework::BioDriver::isPaused_skel},
  {"isStarted", &POA_biosim::idl::framework::BioDriver::isStarted_skel},
  {"spawnSimulation", &POA_biosim::idl::framework::BioDriver::spawnSimulation_skel},
  {"spawnSimulationTillDead", &POA_biosim::idl::framework::BioDriver::spawnSimulationTillDead_skel},
  {"spawnSimulationTillN", &POA_biosim::idl::framework::BioDriver::spawnSimulationTillN_skel},
  {"pauseSimulation", &POA_biosim::idl::framework::BioDriver::pauseSimulation_skel},
  {"endSimulation", &POA_biosim::idl::framework::BioDriver::endSimulation_skel},
  {"simulationHasStarted", &POA_biosim::idl::framework::BioDriver::simulationHasStarted_skel},
  {"advanceOneTick", &POA_biosim::idl::framework::BioDriver::advanceOneTick_skel},
  {"resumeSimulation", &POA_biosim::idl::framework::BioDriver::resumeSimulation_skel},
  {"setLogging", &POA_biosim::idl::framework::BioDriver::setLogging_skel},
  {"isLogging", &POA_biosim::idl::framework::BioDriver::isLogging_skel},
  {"setDriverPauseLength", &POA_biosim::idl::framework::BioDriver::setDriverPauseLength_skel},
  {"getDriverPauseLength", &POA_biosim::idl::framework::BioDriver::getDriverPauseLength_skel},
  {"_is_a", &POA_biosim::idl::framework::BioDriver::_is_a_skel},
  {"_non_existent", &POA_biosim::idl::framework::BioDriver::_non_existent_skel}
};

static const CORBA::Long _tao_biosim_idl_framework_BioDriver_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO_Skeleton>) * (48);
static char _tao_biosim_idl_framework_BioDriver_optable_pool [_tao_biosim_idl_framework_BioDriver_optable_size];
static ACE_Static_Allocator_Base _tao_biosim_idl_framework_BioDriver_allocator (_tao_biosim_idl_framework_BioDriver_optable_pool, _tao_biosim_idl_framework_BioDriver_optable_size);
static TAO_Dynamic_Hash_OpTable tao_biosim_idl_framework_BioDriver_optable (
    biosim_idl_framework_BioDriver_operations,
    16,
    32,
    &_tao_biosim_idl_framework_BioDriver_allocator
  );
#if (TAO_HAS_INTERCEPTORS == 1)
class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    void result (CORBA::Boolean result);

  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    CORBA::Boolean _result;
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

void 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused::result (CORBA::Boolean result)
{
  // Update the result.
   this->_result = result;
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    void result (CORBA::Boolean result);

  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    CORBA::Boolean _result;
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

void 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted::result (CORBA::Boolean result)
{
  // Update the result.
   this->_result = result;
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    
  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    
  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    ,
    const CORBA::Long & nTicks);

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    
  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    const CORBA::Long & nTicks_;
    
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl,
      const CORBA::Long & nTicks
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl),
        nTicks_ (nTicks)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
    parameter_list->length (1);
    CORBA::ULong len = 0;
    
        (*parameter_list)[len].argument <<= nTicks_;
    (*parameter_list)[len].mode = CORBA::PARAM_IN;
    len++;
    
    return safe_parameter_list._retn ();
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    
  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    
  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    void result (CORBA::Boolean result);

  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    CORBA::Boolean _result;
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

void 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::result (CORBA::Boolean result)
{
  // Update the result.
   this->_result = result;
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    
  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    
  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    ,
    const CORBA::Boolean & pLogSim);

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    
  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    const CORBA::Boolean & pLogSim_;
    
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl,
      const CORBA::Boolean & pLogSim
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl),
        pLogSim_ (pLogSim)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
    parameter_list->length (1);
    CORBA::ULong len = 0;
    
        (*parameter_list)[len].argument <<= CORBA::Any::from_boolean (this->pLogSim_);
    (*parameter_list)[len].mode = CORBA::PARAM_IN;
    len++;
    
    return safe_parameter_list._retn ();
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    void result (CORBA::Boolean result);

  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    CORBA::Boolean _result;
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

void 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging::result (CORBA::Boolean result)
{
  // Update the result.
   this->_result = result;
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    ,
    const CORBA::Long & pDriverPauseLength);

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    
  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    const CORBA::Long & pDriverPauseLength_;
    
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl,
      const CORBA::Long & pDriverPauseLength
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl),
        pDriverPauseLength_ (pDriverPauseLength)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    Dynamic::ParameterList_var safe_parameter_list = parameter_list;
    
    parameter_list->length (1);
    CORBA::ULong len = 0;
    
        (*parameter_list)[len].argument <<= pDriverPauseLength_;
    (*parameter_list)[len].mode = CORBA::PARAM_IN;
    len++;
    
    return safe_parameter_list._retn ();
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

class TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength : public TAO_ServerRequestInfo
{
public:
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength (
    TAO_ServerRequest &_tao_server_request,
    TAO_Object_Adapter::Servant_Upcall *tao_servant_upcall,POA_biosim::idl::framework::BioDriver *tao_impl
    );

    virtual Dynamic::ParameterList * arguments (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual Dynamic::ExceptionList * exceptions (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Any * result (
        CORBA::Environment &ACE_TRY_ENV =
          TAO_default_environment ()
      )
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual char * target_most_derived_interface (
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));
    
    virtual CORBA::Boolean target_is_a (
        const char * id,
        CORBA::Environment &ACE_TRY_ENV = TAO_default_environment ())
      ACE_THROW_SPEC ((CORBA::SystemException));

    void result (CORBA::Long result);

  private:
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength &);
    void operator= (const TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength &);
    
  private:
    POA_biosim::idl::framework::BioDriver *_tao_impl;
    CORBA::Long _result;
  };
  
    TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength (
      TAO_ServerRequest &_tao_server_request,
      TAO_Object_Adapter::Servant_Upcall *_tao_servant_upcall,
      POA_biosim::idl::framework::BioDriver *tao_impl
    )
    : TAO_ServerRequestInfo (_tao_server_request, _tao_servant_upcall),
      _tao_impl (tao_impl)  
  {}

Dynamic::ParameterList *
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::arguments (CORBA::Environment &ACE_TRY_ENV)
    ACE_THROW_SPEC ((CORBA::SystemException))
  {
    // Generate the argument list on demand.
    Dynamic::ParameterList *parameter_list =
      TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
    ACE_CHECK_RETURN (0);
    
    return parameter_list;
  }

Dynamic::ExceptionList *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}


CORBA::Any * 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  
  return safe_result_any._retn ();
}

char *
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::target_most_derived_interface (
    CORBA::Environment &)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return
    CORBA::string_dup (this->_tao_impl->_interface_repository_id ());
}

CORBA::Boolean
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::target_is_a (
    const char * id,
    CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  return this->_tao_impl->_is_a (id, ACE_TRY_ENV);
}

void 
TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::result (CORBA::Long result)
{
  // Update the result.
   this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//            Strategized Proxy Broker Implementation
//

// Factory function Implementation.
POA_biosim::idl::framework::_TAO_BioDriver_Strategized_Proxy_Broker *POA_biosim::idl::framework::_TAO_BioDriver_Strategized_Proxy_Broker::the_TAO_BioDriver_Strategized_Proxy_Broker (void)
{
  static POA_biosim::idl::framework::_TAO_BioDriver_Strategized_Proxy_Broker strategized_proxy_broker;
  return &strategized_proxy_broker;
}

POA_biosim::idl::framework::_TAO_BioDriver_Strategized_Proxy_Broker::_TAO_BioDriver_Strategized_Proxy_Broker (void)
{
  for (int i = 0; i < TAO_Collocation_Strategies::CS_LAST; ++i)
    this->proxy_cache_[i] = 0;
  
}

POA_biosim::idl::framework::_TAO_BioDriver_Strategized_Proxy_Broker::~_TAO_BioDriver_Strategized_Proxy_Broker (void)
{
  for (int i = 0; i < TAO_Collocation_Strategies::CS_LAST; ++i)
    delete this->proxy_cache_[i];
  
}

biosim::idl::framework::_TAO_BioDriver_Proxy_Impl&
POA_biosim::idl::framework::_TAO_BioDriver_Strategized_Proxy_Broker::select_proxy (
    ::biosim::idl::framework::BioDriver *object,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  int strategy =
    TAO_ORB_Core::collocation_strategy (object, ACE_TRY_ENV);
    ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
  
  if (this->proxy_cache_[strategy] != 0)
    return *this->proxy_cache_[strategy];
  
  this->create_proxy (strategy, ACE_TRY_ENV);
  ACE_CHECK_RETURN (*this->proxy_cache_[strategy]);
  
  return *this->proxy_cache_[strategy];
  
}

void 
POA_biosim::idl::framework::_TAO_BioDriver_Strategized_Proxy_Broker::create_proxy (
    int strategy,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  ACE_GUARD (TAO_SYNCH_MUTEX, guard, this->mutex_);
  
  if (this->proxy_cache_[strategy] == 0)
    {
      switch (strategy)
        {
        case TAO_Collocation_Strategies::CS_THRU_POA_STRATEGY:
          ACE_NEW_THROW_EX (
              this->proxy_cache_[strategy],
              POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl,
              CORBA::NO_MEMORY ()
          );
          ACE_CHECK;
          break;
          
        case TAO_Collocation_Strategies::CS_REMOTE_STRATEGY:
        default:
          ACE_NEW_THROW_EX (
              this->proxy_cache_[strategy],
              ::biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl,
              CORBA::NO_MEMORY ()
          );
          ACE_CHECK;
          break;
        
      }
    
  }
}


//
//        End Strategized Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////


biosim::idl::framework::_TAO_BioDriver_Proxy_Broker *
biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Factory_function (CORBA::Object_ptr obj)
{
  ACE_UNUSED_ARG (obj);
  return ::POA_biosim::idl::framework::_TAO_BioDriver_Strategized_Proxy_Broker::the_TAO_BioDriver_Strategized_Proxy_Broker();
}

int
biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Factory_Initializer (long)
{
  biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Factory_function_pointer = 
    biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Factory_function;
  
  return 0;
}

static int biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Stub_Factory_Initializer_Scarecrow = 
  biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Factory_Initializer (ACE_reinterpret_cast (long, biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Factory_Initializer));


///////////////////////////////////////////////////////////////////////
//                 ThruPOA Proxy  Implementation
//

POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::_TAO_BioDriver_ThruPOA_Proxy_Impl (void)
{}

// ThruPOA Implementation of the IDL interface methods

CORBA::Boolean POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::isPaused (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "isPaused",
      forward_to.out ()
    );
    return ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->isPaused (
        
      );
}

CORBA::Boolean POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::isStarted (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "isStarted",
      forward_to.out ()
    );
    return ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->isStarted (
        
      );
}

void POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::spawnSimulation (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "spawnSimulation",
      forward_to.out ()
    );
    ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->spawnSimulation (
        
      );
  return;
}

void POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::spawnSimulationTillDead (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "spawnSimulationTillDead",
      forward_to.out ()
    );
    ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->spawnSimulationTillDead (
        
      );
  return;
}

void POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::spawnSimulationTillN (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Long nTicks
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "spawnSimulationTillN",
      forward_to.out ()
    );
    ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->spawnSimulationTillN (
        nTicks
      );
  return;
}

void POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::pauseSimulation (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "pauseSimulation",
      forward_to.out ()
    );
    ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->pauseSimulation (
        
      );
  return;
}

void POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::endSimulation (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "endSimulation",
      forward_to.out ()
    );
    ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->endSimulation (
        
      );
  return;
}

CORBA::Boolean POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::simulationHasStarted (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "simulationHasStarted",
      forward_to.out ()
    );
    return ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->simulationHasStarted (
        
      );
}

void POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::advanceOneTick (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "advanceOneTick",
      forward_to.out ()
    );
    ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->advanceOneTick (
        
      );
  return;
}

void POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::resumeSimulation (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "resumeSimulation",
      forward_to.out ()
    );
    ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->resumeSimulation (
        
      );
  return;
}

void POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::setLogging (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Boolean pLogSim
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "setLogging",
      forward_to.out ()
    );
    ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->setLogging (
        pLogSim
      );
  return;
}

CORBA::Boolean POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::isLogging (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "isLogging",
      forward_to.out ()
    );
    return ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->isLogging (
        
      );
}

void POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::setDriverPauseLength (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Long pDriverPauseLength
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "setDriverPauseLength",
      forward_to.out ()
    );
    ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->setDriverPauseLength (
        pDriverPauseLength
      );
  return;
}

CORBA::Long POA_biosim::idl::framework::_TAO_BioDriver_ThruPOA_Proxy_Impl::getDriverPauseLength (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  TAO_Object_Adapter::Servant_Upcall servant_upcall (
      _collocated_tao_target_->_stubobj ()->servant_orb_var ()->orb_core ()
    );
  CORBA::Object_var forward_to;
  servant_upcall.prepare_for_upcall (
      _collocated_tao_target_->_object_key (),
      "getDriverPauseLength",
      forward_to.out ()
    );
    return ACE_reinterpret_cast (
      POA_biosim::idl::framework::BioDriver_ptr,
      servant_upcall.servant ()->_downcast (
          "IDL:biosim/idl/framework/BioDriver:1.0"
        )
    )->getDriverPauseLength (
        
      );
}

//
//           End ThruPOA Proxy Implementation
///////////////////////////////////////////////////////////////////////

// skeleton constructor
POA_biosim::idl::framework::BioDriver::BioDriver (void)
{
  this->optable_ = &tao_biosim_idl_framework_BioDriver_optable;
}

// copy ctor
POA_biosim::idl::framework::BioDriver::BioDriver (const BioDriver& rhs)
  :   TAO_ServantBase (rhs)
{}

// skeleton destructor
POA_biosim::idl::framework::BioDriver::~BioDriver (void)
{
}

void POA_biosim::idl::framework::BioDriver::isPaused_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  CORBA::Boolean _tao_retval = 0;

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isPaused _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        _tao_retval = 
        _tao_impl->isPaused (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      CORBA::Boolean _tao_retval_info = _tao_retval;
      _tao_ri.result (_tao_retval_info);
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(
      (_tao_out << CORBA::Any::from_boolean (_tao_retval))
    ))
    ACE_THROW (CORBA::MARSHAL());

  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::isStarted_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  CORBA::Boolean _tao_retval = 0;

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isStarted _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        _tao_retval = 
        _tao_impl->isStarted (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      CORBA::Boolean _tao_retval_info = _tao_retval;
      _tao_ri.result (_tao_retval_info);
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(
      (_tao_out << CORBA::Any::from_boolean (_tao_retval))
    ))
    ACE_THROW (CORBA::MARSHAL());

  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::spawnSimulation_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  _tao_server_request.argument_flag (0);
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        
        _tao_impl->spawnSimulation (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::spawnSimulationTillDead_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  _tao_server_request.argument_flag (0);
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        
        _tao_impl->spawnSimulationTillDead (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::spawnSimulationTillN_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  _tao_server_request.argument_flag (0);
    CORBA::Long nTicks;
  if (!(
    (_tao_in >> nTicks)
  ))
    ACE_THROW (CORBA::MARSHAL());


#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      nTicks
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        
        _tao_impl->spawnSimulationTillN (
            nTicks
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::pauseSimulation_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  _tao_server_request.argument_flag (0);
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        
        _tao_impl->pauseSimulation (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::endSimulation_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  _tao_server_request.argument_flag (0);
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_endSimulation _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        
        _tao_impl->endSimulation (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::simulationHasStarted_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  CORBA::Boolean _tao_retval = 0;

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        _tao_retval = 
        _tao_impl->simulationHasStarted (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      CORBA::Boolean _tao_retval_info = _tao_retval;
      _tao_ri.result (_tao_retval_info);
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(
      (_tao_out << CORBA::Any::from_boolean (_tao_retval))
    ))
    ACE_THROW (CORBA::MARSHAL());

  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::advanceOneTick_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  _tao_server_request.argument_flag (0);
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        
        _tao_impl->advanceOneTick (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::resumeSimulation_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  _tao_server_request.argument_flag (0);
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        
        _tao_impl->resumeSimulation (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::setLogging_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  _tao_server_request.argument_flag (0);
    CORBA::Boolean pLogSim;
  if (!(
    (_tao_in >> CORBA::Any::to_boolean (pLogSim))
  ))
    ACE_THROW (CORBA::MARSHAL());


#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setLogging _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      pLogSim
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        
        _tao_impl->setLogging (
            pLogSim
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::isLogging_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  CORBA::Boolean _tao_retval = 0;

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_isLogging _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        _tao_retval = 
        _tao_impl->isLogging (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      CORBA::Boolean _tao_retval_info = _tao_retval;
      _tao_ri.result (_tao_retval_info);
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(
      (_tao_out << CORBA::Any::from_boolean (_tao_retval))
    ))
    ACE_THROW (CORBA::MARSHAL());

  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::setDriverPauseLength_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  _tao_server_request.argument_flag (0);
    CORBA::Long pDriverPauseLength;
  if (!(
    (_tao_in >> pDriverPauseLength)
  ))
    ACE_THROW (CORBA::MARSHAL());


#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl,
      pDriverPauseLength
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        
        _tao_impl->setDriverPauseLength (
            pDriverPauseLength
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::getDriverPauseLength_skel (
    TAO_ServerRequest &_tao_server_request,
    void *_tao_object_reference,
    void *_tao_servant_upcall,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl =
    ACE_static_cast (
        POA_biosim::idl::framework::BioDriver *,
        _tao_object_reference
      );
  CORBA::Long _tao_retval = 0;

#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_Object_Adapter::Servant_Upcall *_tao_upcall =
    ACE_static_cast (TAO_Object_Adapter::Servant_Upcall *, _tao_servant_upcall);
  
  TAO_ServerRequestInterceptor_Adapter _tao_vfr (
      _tao_server_request.orb_core ()->server_request_interceptors (),
      _tao_server_request.interceptor_count ()
    );
  
  TAO_ServerRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength _tao_ri (
      _tao_server_request,
      _tao_upcall,
      _tao_impl
    );
  
  ACE_TRY
    {
      {
        TAO_PICurrent_Guard _tao_pi_guard (_tao_ri.server_request (),
                                           1  /* Copy TSC to RSC */);
        
        _tao_vfr.receive_request (&_tao_ri, ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
#endif /* TAO_HAS_INTERCEPTORS */
        _tao_retval = 
        _tao_impl->getDriverPauseLength (
            
          );
        
#if (TAO_HAS_INTERCEPTORS == 1)
        }
      
      CORBA::Long _tao_retval_info = _tao_retval;
      _tao_ri.result (_tao_retval_info);
      _tao_ri.reply_status (PortableInterceptor::SUCCESSFUL);
      _tao_vfr.send_reply (&_tao_ri, ACE_TRY_ENV);
      ACE_TRY_CHECK;
    }
  ACE_CATCHANY
    {
      _tao_ri.exception (&ACE_ANY_EXCEPTION);
      _tao_vfr.send_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
      ACE_TRY_CHECK;
      
      PortableInterceptor::ReplyStatus _tao_status =
        _tao_ri.reply_status (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
          || _tao_status == PortableInterceptor::USER_EXCEPTION)
        ACE_RE_THROW;
    }
  ACE_ENDTRY;
  ACE_CHECK;
#endif /* TAO_HAS_INTERCEPTORS */
  
  _tao_server_request.init_reply ();
  
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  
  if (!(
      (_tao_out << _tao_retval)
    ))
    ACE_THROW (CORBA::MARSHAL());

  // In case _tao_servant_upcall is not used in this function
  ACE_UNUSED_ARG (_tao_servant_upcall);
  
  // In case ACE_TRY_ENV is not used in this function
  ACE_UNUSED_ARG (ACE_TRY_ENV);
}

void POA_biosim::idl::framework::BioDriver::_is_a_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  TAO_InputCDR &_tao_in = _tao_server_request.incoming ();
  POA_biosim::idl::framework::BioDriver *_tao_impl = (POA_biosim::idl::framework::BioDriver *) _tao_object_reference;
  CORBA::Boolean _tao_retval = 0;
  CORBA::String_var value;
  if (!(_tao_in >> value.out ()))
    ACE_THROW (CORBA::MARSHAL ());
  
  _tao_retval = _tao_impl->_is_a (value.in (), ACE_TRY_ENV);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    ACE_THROW (CORBA::MARSHAL ());
}

void POA_biosim::idl::framework::BioDriver::_non_existent_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl = (POA_biosim::idl::framework::BioDriver *) _tao_object_reference;
  CORBA::Boolean _tao_retval = _tao_impl->_non_existent (ACE_TRY_ENV);
  ACE_CHECK;
  
  _tao_server_request.init_reply ();
  TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
  if (!(_tao_out << CORBA::Any::from_boolean (_tao_retval)))
    ACE_THROW (CORBA::MARSHAL ());
}

void POA_biosim::idl::framework::BioDriver::_interface_skel (
    TAO_ServerRequest &_tao_server_request, 
    void * _tao_object_reference,
    void * /* Servant_Upcall */,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  POA_biosim::idl::framework::BioDriver *_tao_impl = (POA_biosim::idl::framework::BioDriver *) _tao_object_reference;
  CORBA_InterfaceDef_ptr _tao_retval = 0;
  CORBA::Boolean _tao_result = 0;
  
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      ACE_THROW (CORBA::INTF_REPOS ());
    }
  
  ACE_TRY
    {
      _tao_retval = _tao_impl->_get_interface (ACE_TRY_ENV);
      ACE_TRY_CHECK;
      
      _tao_server_request.init_reply ();
      
      TAO_OutputCDR &_tao_out = _tao_server_request.outgoing ();
      
      _tao_result =
        _tao_adapter->interfacedef_cdr_insert (
            _tao_out,
            _tao_retval
          );
    }
  ACE_CATCHALL
    {
      _tao_adapter->dispose (_tao_retval);
    }
  ACE_ENDTRY;
  
  if (_tao_result == 0)
    {
      ACE_THROW (CORBA::MARSHAL ());
    }
}

CORBA::Boolean POA_biosim::idl::framework::BioDriver::_is_a (
    const char* value,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  const char *base_id = CORBA::_tc_Object->id (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  if (
    (!ACE_OS::strcmp ((char *)value, "IDL:biosim/idl/framework/BioDriver:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, base_id)))
      return 1;
    else
      return 0;
}

void* POA_biosim::idl::framework::BioDriver::_downcast (
    const char* logical_type_id
  )
{
  if (ACE_OS::strcmp (logical_type_id, "IDL:biosim/idl/framework/BioDriver:1.0") == 0)
    return ACE_static_cast (POA_biosim::idl::framework::BioDriver_ptr, this);
  if (ACE_OS::strcmp (logical_type_id, "IDL:omg.org/CORBA/Object:1.0") == 0)
    return ACE_static_cast(PortableServer::Servant, this);
  return 0;
}

void POA_biosim::idl::framework::BioDriver::_dispatch (TAO_ServerRequest &req, void *servant_upcall, CORBA::Environment &ACE_TRY_ENV)
{
  this->synchronous_upcall_dispatch (req,
                                     servant_upcall,
                                     this,
                                     ACE_TRY_ENV);
}


const char* POA_biosim::idl::framework::BioDriver::_interface_repository_id (void) const
{
  return "IDL:biosim/idl/framework/BioDriver:1.0";
}

biosim::idl::framework::BioDriver*
POA_biosim::idl::framework::BioDriver::_this (CORBA_Environment &ACE_TRY_ENV)
{
  TAO_Stub *stub = this->_create_stub (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  
  CORBA::Object_ptr tmp = CORBA::Object::_nil ();
  
  if (stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ())
    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 1, this), 0);
  else
    ACE_NEW_RETURN (tmp, CORBA::Object (stub, 0, this), 0);
  
  CORBA::Object_var obj = tmp;
  
  (void) safe_stub.release ();
  
  return ::biosim::idl::framework::BioDriver::_unchecked_narrow (obj.in ());
}



#endif /* ifndef */
