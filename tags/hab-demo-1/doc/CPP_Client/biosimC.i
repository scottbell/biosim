// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_BIOSIM_IDL_STRINGLIST_CI_)
#define _BIOSIM_IDL_STRINGLIST_CI_

// *************************************************************
// Inline operations for class biosim::idl::StringList_var
// *************************************************************

ACE_INLINE
biosim::idl::StringList_var::StringList_var (void) // default constructor
  : ptr_ (0)
{}

ACE_INLINE
biosim::idl::StringList_var::StringList_var (StringList *p)
  : ptr_ (p)
{}

ACE_INLINE
biosim::idl::StringList_var::StringList_var (const ::biosim::idl::StringList_var &p) // copy constructor
{
  if (p.ptr_)
    ACE_NEW (this->ptr_, ::biosim::idl::StringList (*p.ptr_));
  else
    this->ptr_ = 0;
}

ACE_INLINE
biosim::idl::StringList_var::~StringList_var (void) // destructor
{
  delete this->ptr_;
}

ACE_INLINE biosim::idl::StringList_var &
biosim::idl::StringList_var::operator= (StringList *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE ::biosim::idl::StringList_var &
biosim::idl::StringList_var::operator= (const ::biosim::idl::StringList_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          StringList *deep_copy =
            new StringList (*p.ptr_);
          
          if (deep_copy != 0)
            {
              StringList *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE const ::biosim::idl::StringList *
biosim::idl::StringList_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE ::biosim::idl::StringList *
biosim::idl::StringList_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE 
biosim::idl::StringList_var::operator const ::biosim::idl::StringList &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE 
biosim::idl::StringList_var::operator ::biosim::idl::StringList &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE 
biosim::idl::StringList_var::operator ::biosim::idl::StringList &() const // cast 
{
  return *this->ptr_;
}

// variable-size types only
ACE_INLINE
biosim::idl::StringList_var::operator ::biosim::idl::StringList *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager
biosim::idl::StringList_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE const ::biosim::idl::StringList &
biosim::idl::StringList_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE ::biosim::idl::StringList &
biosim::idl::StringList_var::inout (void)
{
  return *this->ptr_;
}

// mapping for variable size 
ACE_INLINE ::biosim::idl::StringList *&
biosim::idl::StringList_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE ::biosim::idl::StringList *
biosim::idl::StringList_var::_retn (void)
{
  ::biosim::idl::StringList *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE ::biosim::idl::StringList *
biosim::idl::StringList_var::ptr (void) const
{
  return this->ptr_;
}

// *************************************************************
// Inline operations for class biosim::idl::StringList_out
// *************************************************************

ACE_INLINE
biosim::idl::StringList_out::StringList_out (StringList *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
biosim::idl::StringList_out::StringList_out (StringList_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
biosim::idl::StringList_out::StringList_out (const ::biosim::idl::StringList_out &p) // copy constructor
  : ptr_ (ACE_const_cast (StringList_out&, p).ptr_)
{}

ACE_INLINE ::biosim::idl::StringList_out &
biosim::idl::StringList_out::operator= (const ::biosim::idl::StringList_out &p)
{
  this->ptr_ = ACE_const_cast (StringList_out&, p).ptr_;
  return *this;
}

ACE_INLINE ::biosim::idl::StringList_out &
biosim::idl::StringList_out::operator= (StringList *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE 
biosim::idl::StringList_out::operator ::biosim::idl::StringList *&() // cast
{
  return this->ptr_;
}

ACE_INLINE ::biosim::idl::StringList *&
biosim::idl::StringList_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE ::biosim::idl::StringList *
biosim::idl::StringList_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE TAO_SeqElem_String_Manager
biosim::idl::StringList_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}


#endif /* end #if !defined */


#if !defined (_BIOSIM_IDL_FRAMEWORK_BIODRIVER___CI_)
#define _BIOSIM_IDL_FRAMEWORK_BIODRIVER___CI_

ACE_INLINE
biosim::idl::framework::BioDriver::BioDriver (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->biosim_idl_framework_BioDriver_setup_collocation (_tao_collocated);
}


#endif /* end #if !defined */


#if !defined _TAO_CDR_OP_biosim_idl_StringList_I_
#define _TAO_CDR_OP_biosim_idl_StringList_I_

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const biosim::idl::StringList &
  );
CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    biosim::idl::StringList &
  );

#endif /* _TAO_CDR_OP_biosim_idl_StringList_I_ */

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const biosim::idl::framework::BioDriver_ptr
  );

 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    biosim::idl::framework::BioDriver_ptr &
  );

