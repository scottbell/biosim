// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#include "biosimC.h"

#include "tao/Stub.h"
#include "tao/Invocation.h"
#include "tao/PortableInterceptor.h"

#if TAO_HAS_INTERCEPTORS == 1
#include "tao/RequestInfo_Util.h"
#include "tao/ClientRequestInfo.h"
#include "tao/ClientInterceptorAdapter.h"
#endif  /* TAO_HAS_INTERCEPTORS == 1 */

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "biosimC.i"
#endif /* !defined INLINE */


#if !defined (_BIOSIM_IDL_STRINGLIST_CS_)
#define _BIOSIM_IDL_STRINGLIST_CS_

// *************************************************************
// biosim::idl::StringList
// *************************************************************

biosim::idl::StringList::StringList (void)
{}
biosim::idl::StringList::StringList (CORBA::ULong max) // uses max size
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_String_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_String_Sequence
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max)
{}
biosim::idl::StringList::StringList (CORBA::ULong max, CORBA::ULong length, char * *buffer, CORBA::Boolean release)
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_String_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_String_Sequence
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (max, length, buffer, release)
{}
biosim::idl::StringList::StringList (const StringList &seq) // copy ctor
  : 
#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_String_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_String_Sequence
#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
 (seq)
{}
biosim::idl::StringList::~StringList (void) // dtor
{}
void biosim::idl::StringList::_tao_any_destructor (void *_tao_void_pointer)
{
  StringList *tmp = ACE_static_cast (StringList*, _tao_void_pointer);
  delete tmp;
}


#endif /* end #if !defined */

static const CORBA::Long _oc_biosim_idl_StringList[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  30,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x62696f73), 
  ACE_NTOHL (0x696d2f69), 
  ACE_NTOHL (0x646c2f53), 
  ACE_NTOHL (0x7472696e), 
  ACE_NTOHL (0x674c6973), 
  ACE_NTOHL (0x743a312e), 
  ACE_NTOHL (0x30000000),  // repository ID = IDL:biosim/idl/StringList:1.0
  11,
  ACE_NTOHL (0x53747269), 
  ACE_NTOHL (0x6e674c69), 
  ACE_NTOHL (0x73740000),  // name = StringList
  CORBA::tk_sequence, // typecode kind
  16, // encapsulation length
    TAO_ENCAP_BYTE_ORDER, // byte order
    CORBA::tk_string, 
    0U, // string length
    0U,

};

static CORBA::TypeCode _tc_TAO_tc_biosim_idl_StringList (
    CORBA::tk_alias,
    sizeof (_oc_biosim_idl_StringList),
    (char *) &_oc_biosim_idl_StringList,
    0,
    sizeof (biosim::idl::StringList)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (biosim)
TAO_NAMESPACE_BEGIN (idl)
TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_StringList, &_tc_TAO_tc_biosim_idl_StringList)
TAO_NAMESPACE_END
TAO_NAMESPACE_END

int biosim::idl::framework::BioDriver::_tao_class_id = 0;

biosim::idl::framework::BioDriver_ptr
tao_biosim_idl_framework_BioDriver_duplicate (
    biosim::idl::framework::BioDriver_ptr p
  )
{
  return biosim::idl::framework::BioDriver::_duplicate (p);
}

void
tao_biosim_idl_framework_BioDriver_release (
    biosim::idl::framework::BioDriver_ptr p
  )
{
  CORBA::release (p);
}

biosim::idl::framework::BioDriver_ptr
tao_biosim_idl_framework_BioDriver_nil (
    void
  )
{
  return biosim::idl::framework::BioDriver::_nil ();
}

biosim::idl::framework::BioDriver_ptr
tao_biosim_idl_framework_BioDriver_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return biosim::idl::framework::BioDriver::_narrow (p, ACE_TRY_ENV);
}

CORBA::Object *
tao_biosim_idl_framework_BioDriver_upcast (
    void *src
  )
{
  biosim::idl::framework::BioDriver **tmp =
    ACE_static_cast (biosim::idl::framework::BioDriver **, src);
  return *tmp;
}

// *************************************************************
// Operations for class biosim::idl::framework::BioDriver_var
// *************************************************************

biosim::idl::framework::BioDriver_var::BioDriver_var (void) // default constructor
  : ptr_ (BioDriver::_nil ())
{}

::biosim::idl::framework::BioDriver_ptr
biosim::idl::framework::BioDriver_var::ptr (void) const
{
  return this->ptr_;
}

biosim::idl::framework::BioDriver_var::BioDriver_var (const ::biosim::idl::framework::BioDriver_var &p) // copy constructor
  : TAO_Base_var (),
    ptr_ (BioDriver::_duplicate (p.ptr ()))
{}

biosim::idl::framework::BioDriver_var::~BioDriver_var (void) // destructor
{
  CORBA::release (this->ptr_);
}

biosim::idl::framework::BioDriver_var &
biosim::idl::framework::BioDriver_var::operator= (BioDriver_ptr p)
{
  CORBA::release (this->ptr_);
  this->ptr_ = p;
  return *this;
}

biosim::idl::framework::BioDriver_var &
biosim::idl::framework::BioDriver_var::operator= (const ::biosim::idl::framework::BioDriver_var &p)
{
  if (this != &p)
  {
    CORBA::release (this->ptr_);
    this->ptr_ = ::biosim::idl::framework::BioDriver::_duplicate (p.ptr ());
  }
  return *this;
}

biosim::idl::framework::BioDriver_var::operator const ::biosim::idl::framework::BioDriver_ptr &() const // cast
{
  return this->ptr_;
}

biosim::idl::framework::BioDriver_var::operator ::biosim::idl::framework::BioDriver_ptr &() // cast 
{
  return this->ptr_;
}

::biosim::idl::framework::BioDriver_ptr
biosim::idl::framework::BioDriver_var::operator-> (void) const
{
  return this->ptr_;
}

::biosim::idl::framework::BioDriver_ptr
biosim::idl::framework::BioDriver_var::in (void) const
{
  return this->ptr_;
}

::biosim::idl::framework::BioDriver_ptr &
biosim::idl::framework::BioDriver_var::inout (void)
{
  return this->ptr_;
}

::biosim::idl::framework::BioDriver_ptr &
biosim::idl::framework::BioDriver_var::out (void)
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::biosim::idl::framework::BioDriver::_nil ();
  return this->ptr_;
}

::biosim::idl::framework::BioDriver_ptr
biosim::idl::framework::BioDriver_var::_retn (void)
{
  // yield ownership of managed obj reference
  ::biosim::idl::framework::BioDriver_ptr val = this->ptr_;
  this->ptr_ = ::biosim::idl::framework::BioDriver::_nil ();
  return val;
}

::biosim::idl::framework::BioDriver_ptr
biosim::idl::framework::BioDriver_var::tao_duplicate (BioDriver_ptr p)
{
  return ::biosim::idl::framework::BioDriver::_duplicate (p);
}

void
biosim::idl::framework::BioDriver_var::tao_release (BioDriver_ptr p)
{
  CORBA::release (p);
}

::biosim::idl::framework::BioDriver_ptr
biosim::idl::framework::BioDriver_var::tao_nil (void)
{
  return ::biosim::idl::framework::BioDriver::_nil ();
}

::biosim::idl::framework::BioDriver_ptr
biosim::idl::framework::BioDriver_var::tao_narrow (
    CORBA::Object *p,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  return ::biosim::idl::framework::BioDriver::_narrow (p, ACE_TRY_ENV);
}

CORBA::Object *
biosim::idl::framework::BioDriver_var::tao_upcast (void *src)
{
  BioDriver **tmp =
    ACE_static_cast (BioDriver **, src);
  return *tmp;
}

// *************************************************************
// Operations for class biosim::idl::framework::BioDriver_out
// *************************************************************

biosim::idl::framework::BioDriver_out::BioDriver_out (BioDriver_ptr &p)
  : ptr_ (p)
{
  this->ptr_ = ::biosim::idl::framework::BioDriver::_nil ();
}

biosim::idl::framework::BioDriver_out::BioDriver_out (BioDriver_var &p) // constructor from _var
  : ptr_ (p.out ())
{
  CORBA::release (this->ptr_);
  this->ptr_ = ::biosim::idl::framework::BioDriver::_nil ();
}

biosim::idl::framework::BioDriver_out::BioDriver_out (const ::biosim::idl::framework::BioDriver_out &p) // copy constructor
  : ptr_ (ACE_const_cast (BioDriver_out &, p).ptr_)
{}

::biosim::idl::framework::BioDriver_out &
biosim::idl::framework::BioDriver_out::operator= (const ::biosim::idl::framework::BioDriver_out &p)
{
  this->ptr_ = ACE_const_cast (BioDriver_out&, p).ptr_;
  return *this;
}

biosim::idl::framework::BioDriver_out &
biosim::idl::framework::BioDriver_out::operator= (const ::biosim::idl::framework::BioDriver_var &p)
{
  this->ptr_ = ::biosim::idl::framework::BioDriver::_duplicate (p.ptr ());
  return *this;
}

biosim::idl::framework::BioDriver_out &
biosim::idl::framework::BioDriver_out::operator= (BioDriver_ptr p)
{
  this->ptr_ = p;
  return *this;
}

biosim::idl::framework::BioDriver_out::operator ::biosim::idl::framework::BioDriver_ptr &() // cast
{
  return this->ptr_;
}

::biosim::idl::framework::BioDriver_ptr &
biosim::idl::framework::BioDriver_out::ptr (void) // ptr
{
  return this->ptr_;
}

::biosim::idl::framework::BioDriver_ptr
biosim::idl::framework::BioDriver_out::operator-> (void)
{
  return this->ptr_;
}


#if (TAO_HAS_INTERCEPTORS == 1)
class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (CORBA::Boolean result);

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused &);

  CORBA::Boolean _result;
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused::result (CORBA::Boolean result)
{
  // update the result 
  this->_result = result;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (CORBA::Boolean result);

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted &);

  CORBA::Boolean _result;
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted::result (CORBA::Boolean result)
{
  // update the result 
  this->_result = result;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation &);

  
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead &);

  
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const CORBA::Long & nTicks);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN &);

  const CORBA::Long & nTicks_;
  
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::Long & nTicks    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    nTicks_ (nTicks)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
    (*parameter_list)[len].argument <<= nTicks_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation &);

  
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation &);

  
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (CORBA::Boolean result);

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted &);

  CORBA::Boolean _result;
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted::result (CORBA::Boolean result)
{
  // update the result 
  this->_result = result;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick &);

  
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation &);

  
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const CORBA::Boolean & pLogSim);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging &);

  const CORBA::Boolean & pLogSim_;
  
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::Boolean & pLogSim    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    pLogSim_ (pLogSim)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
    (*parameter_list)[len].argument <<= CORBA::Any::from_boolean (this->pLogSim_);
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (CORBA::Boolean result);

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging &);

  CORBA::Boolean _result;
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= CORBA::Any::from_boolean (this->_result);
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging::result (CORBA::Boolean result)
{
  // update the result 
  this->_result = result;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target,
      const CORBA::Long & pDriverPauseLength);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength &);

  const CORBA::Long & pDriverPauseLength_;
  
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target,
    const CORBA::Long & pDriverPauseLength    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target),
    pDriverPauseLength_ (pDriverPauseLength)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  Dynamic::ParameterList_var safe_parameter_list = parameter_list;
  
  parameter_list->length (1);
  CORBA::ULong len = 0;
  
    (*parameter_list)[len].argument <<= pDriverPauseLength_;
  (*parameter_list)[len].mode = CORBA::PARAM_IN;
  len++;
  
  return safe_parameter_list._retn ();
}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 1;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return result_any;
}

class TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength : public TAO_ClientRequestInfo
{
public:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength (
      TAO_GIOP_Invocation *_tao_invocation,
      CORBA::Object_ptr _tao_target);

  virtual Dynamic::ParameterList * arguments (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual Dynamic::ExceptionList * exceptions (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));
  
  virtual CORBA::Any * result (
      CORBA::Environment &ACE_TRY_ENV =
        TAO_default_environment ()
    )
    ACE_THROW_SPEC ((CORBA::SystemException));

  void result (CORBA::Long result);

private:
  TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength &);
  void operator= (const TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength &);

  CORBA::Long _result;
};

TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength (
    TAO_GIOP_Invocation *_tao_invocation,
    CORBA::Object_ptr _tao_target    
  )
  : TAO_ClientRequestInfo (_tao_invocation, _tao_target)
{}

Dynamic::ParameterList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::arguments (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the argument list on demand.
  Dynamic::ParameterList *parameter_list =
    TAO_RequestInfo_Util::make_parameter_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return parameter_list;

}

Dynamic::ExceptionList *
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::exceptions (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the exception list on demand.
  Dynamic::ExceptionList *exception_list =
    TAO_RequestInfo_Util::make_exception_list (ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return exception_list;
}

CORBA::Any * 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::result (CORBA::Environment &ACE_TRY_ENV)
  ACE_THROW_SPEC ((CORBA::SystemException))
{
  // Generate the result on demand.
  CORBA::Boolean tk_void_any = 0;
  CORBA::Any *result_any =
    TAO_RequestInfo_Util::make_any (tk_void_any, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  CORBA::Any_var safe_result_any = result_any;
  
  (*result_any) <<= this->_result;
  return safe_result_any._retn ();
}

void 
TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength::result (CORBA::Long result)
{
  // update the result 
  this->_result = result;
}

#endif /* TAO_HAS_INTERCEPTORS */

///////////////////////////////////////////////////////////////////////
//                Base & Remote Proxy  Implementation. 
//

biosim::idl::framework::_TAO_BioDriver_Proxy_Impl::_TAO_BioDriver_Proxy_Impl (void)
{}

biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::_TAO_BioDriver_Remote_Proxy_Impl (void)
{}

// Remote Implementation of the IDL interface methods

CORBA::Boolean biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::isPaused (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  CORBA::Boolean _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "isPaused",
      8,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isPaused _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> CORBA::Any::to_boolean (_tao_retval))
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          CORBA::Boolean _tao_retval_info = _tao_retval;
          _tao_ri.result (_tao_retval_info);
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK_RETURN  (_tao_retval);
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK_RETURN  (_tao_retval);
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }
return _tao_retval;
}

CORBA::Boolean biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::isStarted (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  CORBA::Boolean _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "isStarted",
      9,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isStarted _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> CORBA::Any::to_boolean (_tao_retval))
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          CORBA::Boolean _tao_retval_info = _tao_retval;
          _tao_ri.result (_tao_retval_info);
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK_RETURN  (_tao_retval);
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK_RETURN  (_tao_retval);
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }
return _tao_retval;
}

void biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::spawnSimulation (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "spawnSimulation",
      15,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulation _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK;
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }

}

void biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::spawnSimulationTillDead (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "spawnSimulationTillDead",
      23,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillDead _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK;
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }

}

void biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::spawnSimulationTillN (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Long nTicks
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "spawnSimulationTillN",
      20,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_spawnSimulationTillN _tao_ri (
        &_tao_call,
        _collocated_tao_target_,
        nTicks
      );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << nTicks)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK;
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }

}

void biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::pauseSimulation (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "pauseSimulation",
      15,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_pauseSimulation _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK;
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }

}

void biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::endSimulation (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "endSimulation",
      13,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_endSimulation _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK;
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }

}

CORBA::Boolean biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::simulationHasStarted (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  CORBA::Boolean _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "simulationHasStarted",
      20,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_simulationHasStarted _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> CORBA::Any::to_boolean (_tao_retval))
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          CORBA::Boolean _tao_retval_info = _tao_retval;
          _tao_ri.result (_tao_retval_info);
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK_RETURN  (_tao_retval);
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK_RETURN  (_tao_retval);
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }
return _tao_retval;
}

void biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::advanceOneTick (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "advanceOneTick",
      14,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_advanceOneTick _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK;
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }

}

void biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::resumeSimulation (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "resumeSimulation",
      16,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_resumeSimulation _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK;
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }

}

void biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::setLogging (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Boolean pLogSim
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "setLogging",
      10,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setLogging _tao_ri (
        &_tao_call,
        _collocated_tao_target_,
        pLogSim
      );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << CORBA::Any::from_boolean (pLogSim))
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK;
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }

}

CORBA::Boolean biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::isLogging (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  CORBA::Boolean _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "isLogging",
      9,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_isLogging _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> CORBA::Any::to_boolean (_tao_retval))
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          CORBA::Boolean _tao_retval_info = _tao_retval;
          _tao_ri.result (_tao_retval_info);
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK_RETURN  (_tao_retval);
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK_RETURN  (_tao_retval);
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }
return _tao_retval;
}

void biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::setDriverPauseLength (
    CORBA_Object *_collocated_tao_target_,
    CORBA::Long pDriverPauseLength
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW (CORBA::INTERNAL ());

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "setDriverPauseLength",
      20,
      1,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_setDriverPauseLength _tao_ri (
        &_tao_call,
        _collocated_tao_target_,
        pDriverPauseLength
      );
      ACE_CHECK;
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK;
          
          TAO_OutputCDR &_tao_out = _tao_call.out_stream ();
          if (!(
                            (_tao_out << pDriverPauseLength)
            ))
            TAO_INTERCEPTOR_THROW (
              CORBA::MARSHAL ()
            );
            
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK;
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES)
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          
#if TAO_HAS_INTERCEPTORS == 1
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK;
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK;
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }

}

CORBA::Long biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Impl::getDriverPauseLength (
    CORBA_Object *_collocated_tao_target_
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  CORBA::Long _tao_retval = 0;
  
  
  TAO_Stub *istub = _collocated_tao_target_->_stubobj ();
  if (istub == 0)
    ACE_THROW_RETURN (CORBA::INTERNAL (), _tao_retval);

  
  TAO_GIOP_Twoway_Invocation _tao_call (
      istub,
      "getDriverPauseLength",
      20,
      0,
      istub->orb_core ()
    );
  
  int _invoke_status;
  
#if (TAO_HAS_INTERCEPTORS == 1)
  TAO_ClientRequestInterceptor_Adapter _tao_vfr (
      istub->orb_core ()->client_request_interceptors (),
      &_tao_call,
      _invoke_status
    );
  
#endif  /* TAO_HAS_INTERCEPTORS */
  
  for (;;)
    {
      _invoke_status = TAO_INVOKE_EXCEPTION;
      
#if TAO_HAS_INTERCEPTORS == 1
      TAO_ClientRequestInfo_biosim_idl_framework_BioDriver_getDriverPauseLength _tao_ri (
        &_tao_call,
        _collocated_tao_target_
      );
      ACE_CHECK_RETURN  (_tao_retval);
      
#endif /* TAO_HAS_INTERCEPTORS */
      
      
      CORBA::Short _tao_response_flag = TAO_TWOWAY_RESPONSE_FLAG;
      TAO_INTERCEPTOR (_tao_ri.response_expected (1));
      
#if TAO_HAS_INTERCEPTORS == 1
      
      ACE_TRY
        {
          _tao_vfr.send_request (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
          
          if (_invoke_status == TAO_INVOKE_RESTART)
            {
              _tao_call.restart_flag (1);
              continue;
            }
          
#endif /* TAO_HAS_INTERCEPTORS */
          
          _tao_call.start (ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _tao_call.prepare_header (
              ACE_static_cast (CORBA::Octet, _tao_response_flag),
              ACE_TRY_ENV
            );
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          _invoke_status =
            _tao_call.invoke (0, 0, ACE_TRY_ENV);
          TAO_INTERCEPTOR_CHECK_RETURN  (_tao_retval);
          
          if (_invoke_status == TAO_INVOKE_EXCEPTION)
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::UNKNOWN (TAO_OMG_VMCID | 1, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          else if (_invoke_status == TAO_INVOKE_RESTART)
            {
              TAO_INTERCEPTOR (
                _tao_ri.reply_status (_invoke_status);
                _tao_vfr.receive_other (
                  &_tao_ri,
                  ACE_TRY_ENV
                );
                ACE_TRY_CHECK;
              )
              
              continue;
            }
          
          TAO_InputCDR &_tao_in = _tao_call.inp_stream ();
          if (!(
                            (_tao_in >> _tao_retval)
              ))
            {
              TAO_INTERCEPTOR_THROW_RETURN (
                CORBA::MARSHAL (TAO_DEFAULT_MINOR_CODE, CORBA::COMPLETED_YES),
                _tao_retval
              );
              
            }
          
#if TAO_HAS_INTERCEPTORS == 1
          CORBA::Long _tao_retval_info = _tao_retval;
          _tao_ri.result (_tao_retval_info);
          
          _tao_ri.reply_status (_invoke_status);
          _tao_vfr.receive_reply (
            &_tao_ri,
            ACE_TRY_ENV
          );
          ACE_TRY_CHECK;
        
      }
    ACE_CATCHANY
      {
        _tao_ri.exception (&ACE_ANY_EXCEPTION);
        _tao_vfr.receive_exception (
          &_tao_ri,
          ACE_TRY_ENV
        );
        ACE_TRY_CHECK;
        
        PortableInterceptor::ReplyStatus _tao_status =
          _tao_ri.reply_status (ACE_TRY_ENV);
        ACE_TRY_CHECK;
        
        if (_tao_status == PortableInterceptor::SYSTEM_EXCEPTION
            || _tao_status == PortableInterceptor::USER_EXCEPTION)
          ACE_RE_THROW;
      }
    ACE_ENDTRY;
    ACE_CHECK_RETURN  (_tao_retval);
    
    PortableInterceptor::ReplyStatus _tao_status =
      _tao_ri.reply_status (ACE_TRY_ENV);
    ACE_CHECK_RETURN  (_tao_retval);
    
    if (_tao_status == PortableInterceptor::LOCATION_FORWARD
        || _tao_status == PortableInterceptor::TRANSPORT_RETRY)
      continue;
    
#endif  /* TAO_HAS_INTERCEPTORS */
    
    break;
  }
return _tao_retval;
}


//
//            End  Base & Remote  Proxy Implemeentation. 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//           Remote & Base  Proxy Broker Implementation
//

biosim::idl::framework::_TAO_BioDriver_Proxy_Broker::_TAO_BioDriver_Proxy_Broker (void)
{
}

biosim::idl::framework::_TAO_BioDriver_Proxy_Broker::~_TAO_BioDriver_Proxy_Broker (void)
{
}

biosim::idl::framework::_TAO_BioDriver_Proxy_Broker * (*biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// Factory Member function Implementation.
biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Broker *
biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Broker::the_TAO_BioDriver_Remote_Proxy_Broker (void)
{
  static ::biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Broker remote_proxy_broker;
  return &remote_proxy_broker;
}

biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Broker::_TAO_BioDriver_Remote_Proxy_Broker (void)
{
}

biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Broker::~_TAO_BioDriver_Remote_Proxy_Broker (void)
{
}

biosim::idl::framework::_TAO_BioDriver_Proxy_Impl&
biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Broker::select_proxy (
  ::biosim::idl::framework::BioDriver *,
  CORBA::Environment &
)
{
  return this->remote_proxy_impl_;
}


//
//           End Remote & Base Proxy Broker Implementation
///////////////////////////////////////////////////////////////////////


// default constructor
biosim::idl::framework::BioDriver::BioDriver (int collocated)
{
  this->biosim_idl_framework_BioDriver_setup_collocation (collocated);
}

// destructor
biosim::idl::framework::BioDriver::~BioDriver (void)
{}

void
biosim::idl::framework::BioDriver::biosim_idl_framework_BioDriver_setup_collocation (int collocated)
{
  if (collocated)
    this->the_TAO_BioDriver_Proxy_Broker_ =
      ::biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Factory_function_pointer (this);
  else
    this->the_TAO_BioDriver_Proxy_Broker_ =
      ::biosim::idl::framework::_TAO_BioDriver_Remote_Proxy_Broker::the_TAO_BioDriver_Remote_Proxy_Broker ();
}

void biosim::idl::framework::BioDriver::_tao_any_destructor (void *_tao_void_pointer)
{
  BioDriver *tmp = ACE_static_cast (BioDriver*, _tao_void_pointer);
  CORBA::release (tmp);
}

biosim::idl::framework::BioDriver_ptr biosim::idl::framework::BioDriver::_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &ACE_TRY_ENV
  )
{
  if (CORBA::is_nil (obj))
    return BioDriver::_nil ();
  if (! obj->_is_local ())
    {
      CORBA::Boolean is_a = obj->_is_a ("IDL:biosim/idl/framework/BioDriver:1.0", ACE_TRY_ENV);
      ACE_CHECK_RETURN (BioDriver::_nil ());
      if (is_a == 0)
        return BioDriver::_nil ();
    }
  return BioDriver::_unchecked_narrow (obj, ACE_TRY_ENV);
}

biosim::idl::framework::BioDriver_ptr biosim::idl::framework::BioDriver::_unchecked_narrow (
    CORBA::Object_ptr obj,
    CORBA::Environment &
  )
{
  if (CORBA::is_nil (obj))
    return BioDriver::_nil ();
  if (! obj->_is_local ())
    {
      TAO_Stub* stub = obj->_stubobj ();
      if (stub)
        stub->_incr_refcnt ();
      BioDriver_ptr default_proxy = BioDriver::_nil ();

      if (
          !CORBA::is_nil (stub->servant_orb_var ().ptr ()) &&
          stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects () &&
          obj->_is_collocated () &&
          biosim_idl_framework__TAO_BioDriver_Proxy_Broker_Factory_function_pointer != 0
        )
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::biosim::idl::framework::BioDriver (
                  stub,
                  1,
                  obj->_servant ()
                ),
              BioDriver::_nil ()
            );
        }
      
      if (CORBA::is_nil (default_proxy))
        {
          ACE_NEW_RETURN (
              default_proxy,
              ::biosim::idl::framework::BioDriver (
                  stub,
                  0,
                  obj->_servant ()
                ),
              BioDriver::_nil ()
            );
        }
      
      return default_proxy;
    }
  else 
    return
      ACE_reinterpret_cast
        (
          BioDriver_ptr,
            obj->_tao_QueryInterface
              (
                ACE_reinterpret_cast
                  (
                    ptr_arith_t,
                    &BioDriver::_tao_class_id
                  )
              )
        );
}

biosim::idl::framework::BioDriver_ptr
biosim::idl::framework::BioDriver::_duplicate (BioDriver_ptr obj)
{
  if (!CORBA::is_nil (obj))
    obj->_add_ref ();
  return obj;
}

CORBA::Boolean biosim::idl::framework::BioDriver::_is_a (const CORBA::Char *value, CORBA::Environment &ACE_TRY_ENV)
{
  if (
    (!ACE_OS::strcmp ((char *)value, "IDL:biosim/idl/framework/BioDriver:1.0")) ||
    (!ACE_OS::strcmp ((char *)value, "IDL:omg.org/CORBA/Object:1.0")))
  return 1; // success using local knowledge
  else
    return this->CORBA_Object::_is_a (value, ACE_TRY_ENV);
}

void *biosim::idl::framework::BioDriver::_tao_QueryInterface (ptr_arith_t type)
{
  void *retv = 0;
  if (type == ACE_reinterpret_cast
    (ptr_arith_t,
      &ACE_NESTED_CLASS (::biosim::idl::framework, BioDriver)::_tao_class_id))
    retv = ACE_reinterpret_cast (void*, this);
  else if (type == ACE_reinterpret_cast (ptr_arith_t, &CORBA::Object::_tao_class_id))
    retv = ACE_reinterpret_cast (void *,
      ACE_static_cast (CORBA::Object_ptr, this));
    
  if (retv)
    this->_add_ref ();
  return retv;
}

const char* biosim::idl::framework::BioDriver::_interface_repository_id (void) const
{
  return "IDL:biosim/idl/framework/BioDriver:1.0";
}

CORBA::Boolean biosim::idl::framework::BioDriver::isPaused (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.isPaused (
      this
    );
}

CORBA::Boolean biosim::idl::framework::BioDriver::isStarted (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.isStarted (
      this
    );
}

void biosim::idl::framework::BioDriver::spawnSimulation (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.spawnSimulation (
      this
    );
}

void biosim::idl::framework::BioDriver::spawnSimulationTillDead (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.spawnSimulationTillDead (
      this
    );
}

void biosim::idl::framework::BioDriver::spawnSimulationTillN (
    CORBA::Long nTicks
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.spawnSimulationTillN (
      this,
      nTicks
    );
}

void biosim::idl::framework::BioDriver::pauseSimulation (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.pauseSimulation (
      this
    );
}

void biosim::idl::framework::BioDriver::endSimulation (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.endSimulation (
      this
    );
}

CORBA::Boolean biosim::idl::framework::BioDriver::simulationHasStarted (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.simulationHasStarted (
      this
    );
}

void biosim::idl::framework::BioDriver::advanceOneTick (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.advanceOneTick (
      this
    );
}

void biosim::idl::framework::BioDriver::resumeSimulation (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.resumeSimulation (
      this
    );
}

void biosim::idl::framework::BioDriver::setLogging (
    CORBA::Boolean pLogSim
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.setLogging (
      this,
      pLogSim
    );
}

CORBA::Boolean biosim::idl::framework::BioDriver::isLogging (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.isLogging (
      this
    );
}

void biosim::idl::framework::BioDriver::setDriverPauseLength (
    CORBA::Long pDriverPauseLength
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK;
  
  proxy.setDriverPauseLength (
      this,
      pDriverPauseLength
    );
}

CORBA::Long biosim::idl::framework::BioDriver::getDriverPauseLength (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  ACE_DECLARE_NEW_CORBA_ENV;
  
  _TAO_BioDriver_Proxy_Impl &proxy = 
    this->the_TAO_BioDriver_Proxy_Broker_->select_proxy (this, ACE_TRY_ENV);
  ACE_CHECK_RETURN (0);
  
  return proxy.getDriverPauseLength (
      this
    );
}

static const CORBA::Long _oc_biosim_idl_framework_BioDriver[] =
{
  TAO_ENCAP_BYTE_ORDER, // byte order
  39,
  ACE_NTOHL (0x49444c3a), 
  ACE_NTOHL (0x62696f73), 
  ACE_NTOHL (0x696d2f69), 
  ACE_NTOHL (0x646c2f66), 
  ACE_NTOHL (0x72616d65), 
  ACE_NTOHL (0x776f726b), 
  ACE_NTOHL (0x2f42696f), 
  ACE_NTOHL (0x44726976), 
  ACE_NTOHL (0x65723a31), 
  ACE_NTOHL (0x2e300000),  // repository ID = IDL:biosim/idl/framework/BioDriver:1.0
  10,
  ACE_NTOHL (0x42696f44), 
  ACE_NTOHL (0x72697665), 
  ACE_NTOHL (0x72000000),  // name = BioDriver
};

static CORBA::TypeCode _tc_TAO_tc_biosim_idl_framework_BioDriver (
    CORBA::tk_objref,
    sizeof (_oc_biosim_idl_framework_BioDriver),
    (char *) &_oc_biosim_idl_framework_BioDriver,
    0,
    sizeof (biosim::idl::framework::BioDriver)
  );

TAO_NAMESPACE_TYPE (CORBA::TypeCode_ptr)
TAO_NAMESPACE_BEGIN (biosim)
TAO_NAMESPACE_BEGIN (idl)
TAO_NAMESPACE_BEGIN (framework)
TAO_NAMESPACE_DEFINE (CORBA::TypeCode_ptr, _tc_BioDriver, &_tc_TAO_tc_biosim_idl_framework_BioDriver)
TAO_NAMESPACE_END
TAO_NAMESPACE_END
TAO_NAMESPACE_END

void operator<<= (
    CORBA::Any &_tao_any,
    const biosim::idl::StringList &_tao_elem
  ) // copying
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        biosim::idl::_tc_StringList,
        TAO_ENCAP_BYTE_ORDER,
        stream.begin ()
      );
  }
}

void operator<<= (CORBA::Any &_tao_any, biosim::idl::StringList *_tao_elem) // non copying
{
  TAO_OutputCDR stream;
  stream << *_tao_elem;
  _tao_any._tao_replace (
      biosim::idl::_tc_StringList,
      TAO_ENCAP_BYTE_ORDER,
      stream.begin (),
      1,
      _tao_elem,
      biosim::idl::StringList::_tao_any_destructor
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, biosim::idl::StringList *&_tao_elem)
{
  return _tao_any >>= ACE_const_cast(
      const biosim::idl::StringList*&,
      _tao_elem
    );
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, const biosim::idl::StringList *&_tao_elem)
{
  _tao_elem = 0;
  ACE_TRY_NEW_ENV
  {
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (biosim::idl::_tc_StringList, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    if (_tao_any.any_owns_data ())
    {
      _tao_elem = ACE_static_cast(
          const biosim::idl::StringList*,
          _tao_any.value ()
        );
      return 1;
    }
    else
    {
      biosim::idl::StringList *tmp;
      ACE_NEW_RETURN (tmp, biosim::idl::StringList, 0);
      TAO_InputCDR stream (
          _tao_any._tao_get_cdr (),
          _tao_any._tao_byte_order ()
        );
      if (stream >> *tmp)
      {
        ((CORBA::Any *)&_tao_any)->_tao_replace (
            biosim::idl::_tc_StringList,
            1,
            ACE_static_cast (void *, tmp),
            biosim::idl::StringList::_tao_any_destructor
          );
        _tao_elem = tmp;
        return 1;
      }
      else
      {
        delete tmp;
      }
    }
  }
  ACE_CATCHANY
  {
  }
  ACE_ENDTRY;
  return 0;
}

void operator<<= (CORBA::Any &_tao_any, biosim::idl::framework::BioDriver_ptr _tao_elem)
{
  TAO_OutputCDR stream;
  if (stream << _tao_elem)
  {
    _tao_any._tao_replace (
        biosim::idl::framework::_tc_BioDriver, 
        TAO_ENCAP_BYTE_ORDER,
        stream.begin (),
        1,
        biosim::idl::framework::BioDriver::_duplicate (_tao_elem),
        biosim::idl::framework::BioDriver::_tao_any_destructor
      );
  }
}

CORBA::Boolean operator>>= (const CORBA::Any &_tao_any, biosim::idl::framework::BioDriver_ptr &_tao_elem)
{
  ACE_TRY_NEW_ENV
  {
    _tao_elem = biosim::idl::framework::BioDriver::_nil ();
    CORBA::TypeCode_var type = _tao_any.type ();
    
    CORBA::Boolean result = type->equivalent (biosim::idl::framework::_tc_BioDriver, ACE_TRY_ENV);
    ACE_TRY_CHECK;
    
    if (!result)
      return 0; // not equivalent
    
    TAO_InputCDR stream (
        _tao_any._tao_get_cdr (),
        _tao_any._tao_byte_order ()
      );
    if (stream >> _tao_elem)
    {
      ((CORBA::Any *)&_tao_any)->_tao_replace (
          biosim::idl::framework::_tc_BioDriver,
          1,
          _tao_elem,
          biosim::idl::framework::BioDriver::_tao_any_destructor
        );
      return 1;
    }
  }
  ACE_CATCHANY
  {
    _tao_elem = biosim::idl::framework::BioDriver::_nil ();
    return 0;
  }
  ACE_ENDTRY;
  _tao_elem = biosim::idl::framework::BioDriver::_nil ();
  return 0;
}

#if defined (ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION)  || \
    defined (ACE_HAS_GNU_REPO)
    template class TAO_Object_Manager<biosim::idl::framework::BioDriver,biosim::idl::framework::BioDriver_var>;
  #elif defined (ACE_HAS_TEMPLATE_INSTANTIATION_PRAGMA)
  #  pragma instantiate TAO_Object_Manager<biosim::idl::framework::BioDriver,biosim::idl::framework::BioDriver_var>
#endif /* ACE_HAS_EXPLICIT_TEMPLATE_INSTANTIATION */

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const biosim::idl::StringList &_tao_sequence
  )
{
  if (strm << _tao_sequence.length ())
  {
    // encode all elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm << _tao_sequence[i].in ());
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    biosim::idl::StringList &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  if (strm >> _tao_seq_len)
  {
    // set the length of the sequence
    _tao_sequence.length (_tao_seq_len);
    // If length is 0 we return true.
    if (0 >= _tao_seq_len) 
      return 1;
    // Add a check to the length of the sequence
    // to make sure it does not exceed the length
    // of the stream. (See bug 58.)
    if (_tao_seq_len > strm.length())
      return 0;
    // retrieve all the elements
    CORBA::Boolean _tao_marshal_flag = 1;
    for (CORBA::ULong i = 0; i < _tao_sequence.length () && _tao_marshal_flag; i++)
    {
      _tao_marshal_flag = (strm >> _tao_sequence[i].out ());
    }
    return _tao_marshal_flag;
  }
  return 0; // error
}

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const biosim::idl::framework::BioDriver_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    biosim::idl::framework::BioDriver_ptr &_tao_objref
  )
{
  ACE_TRY_NEW_ENV
  {
    CORBA::Object_var obj;
    if ((strm >> obj.inout ()) == 0)
      return 0;
    // narrow to the right type
    _tao_objref =
      biosim::idl::framework::BioDriver::_unchecked_narrow (
          obj.in (),
          ACE_TRY_ENV
        );
    ACE_TRY_CHECK;
    return 1;
  }
  ACE_CATCHANY
  {
    // do nothing
  }
  ACE_ENDTRY;
  return 0;
}

