//Prototyping
module biosim{
        module idl{
                typedef sequence <string> StringList;
                typedef sequence <float> FloatList;
                module simulation{
                        module power{
                                interface PowerPS;
                                interface PowerStore;
                                typedef sequence <PowerStore> PowerStoreList;
                        };
                        module crew{
                                interface Activity;
                                interface CrewPerson;
                                interface CrewGroup;
                                typedef sequence <CrewPerson> CrewPersonList;
                                enum Sex {male, female};
                                interface Activity;
                                interface RepairActivity;
                                interface MaitenanceActivity;
                                interface CrewPerson;
                                interface CrewGroup;
                        };
                        module air{
                                interface AirRS;
                                interface O2Store;
                                interface CO2Store;
                                struct Breath{
                                        float O2;
                                        float CO2;
                                        float water;
                                        float other;
                                };
                                typedef sequence <O2Store> O2StoreList;
                                typedef sequence <CO2Store> CO2StoreList;
                        };
                        module food{
                                interface Shelf;
                                interface BiomassRS;
                                interface BiomassStore;
                                interface FoodProcessor;
                                interface FoodStore;
                                interface Shelf;
                                interface Plant;
                                enum PlantType {WHEAT, DRY_BEAN, LETTUCE, PEANUT, RICE, SOYBEAN, SWEET_POTATO, TOMATO, WHITE_POTATO};
                                struct BioMatter{
                                        float mass;
                                        PlantType type;
                                };
                                struct FoodMatter{
                                        float mass;
                                        PlantType type;
                                };
                                typedef sequence <Shelf> ShelfList;
                                typedef sequence <BiomassStore> BiomassStoreList;
                                typedef sequence <FoodStore> FoodStoreList;
                                typedef sequence <BioMatter> BioMatterList;
                                typedef sequence <FoodMatter> FoodMatterList;
                        };
                        module environment{
                                interface SimEnvironment;
                                typedef sequence <SimEnvironment> SimEnvironmentList;
                        };
                        module water{
                                interface WaterRS;
                                interface PotableWaterStore;
                                interface GreyWaterStore;
                                interface DirtyWaterStore;
                                typedef sequence <PotableWaterStore> PotableWaterStoreList;
                                typedef sequence <GreyWaterStore> GreyWaterStoreList;
                                typedef sequence <DirtyWaterStore> DirtyWaterStoreList;
                        };
                        module framework{
                                interface SimBioModule;
                                interface Injector;
                                interface Accumulator;
                                interface Store;
                        };
                };
                module sensor{
                        module framework{
                                interface GenericSensor;
                        };
                };
                module util{
                        module log{
                                interface LogNode;
                                enum LogHandlerType {SCREEN,XML,FLAT,DB};
                                typedef sequence <LogHandlerType> LogHandlerTypeList;
                                interface Logger;
                                typedef sequence <LogNode> LogNodeList;
                        };
                };
                module framework{
                        enum BioDriverInit {DEFAULT_INIT, OPTIMAL_INIT, FLOWS_ONLY_INIT, NO_INIT};
                        enum StochasticIntensity {HIGH_STOCH, MEDIUM_STOCH, LOW_STOCH, NONE_STOCH};
                        enum MalfunctionIntensity {SEVERE_MALF, MEDIUM_MALF, LOW_MALF};
                        enum MalfunctionLength {TEMPORARY_MALF, PERMANENT_MALF};
                        interface Malfunction;
                        typedef sequence <Malfunction> MalfunctionList;
                        interface BioModule;
                        interface BioDriver;
                        //Producers & Consumers
                        interface PowerConsumer;
                        interface PowerProducer;
                        interface PotableWaterConsumer;
                        interface PotableWaterProducer;
                        interface GreyWaterConsumer;
                        interface GreyWaterProducer;
                        interface DirtyWaterConsumer;
                        interface DirtyWaterProducer;
                        interface AirConsumer;
                        interface AirProducer;
                        interface O2AirConsumer;
                        interface O2AirProducer;
                        interface CO2AirConsumer;
                        interface CO2AirProducer;
                        interface O2Producer;
                        interface O2Consumer;
                        interface CO2Producer;
                        interface CO2Consumer;
                        interface LightConsumer;
                        interface BiomassConsumer;
                        interface FoodConsumer;
                        interface BiomassProducer;
                        interface FoodProducer;
                };
        };
};

//Declarations
module biosim{
        module idl{
                module framework{
                        interface Malfunction{
                                MalfunctionIntensity getIntensity();
                                long long getID();
                                string getName();
                                boolean hasPerformed();
                                void setPerformed(in boolean pPerformed);
                                MalfunctionLength getLength();
                                void repair();
                                boolean isRepaired();
                        };
                        interface BioModule{
                                void tick();
                                string getModuleName();
                                void reset();
                                void setLogging(in boolean pLogging);
                                boolean isLogging();
                                void setStochasticIntensity(in StochasticIntensity pIntensity);
                                StochasticIntensity getStochasticIntensity();
                                Malfunction startMalfunction(in MalfunctionIntensity pIntensity, in MalfunctionLength pLength);
                                void fixMalfunction(in long long id);
                                void fixAllMalfunctions();
                                void clearAllMalfunctions();
                                boolean isMalfunctioning();
                                StringList getMalfunctionNames();
                                MalfunctionList getMalfunctions();
                                void maitenance();
                                void repair(in long long id);
                                void clearMalfunction(in long long id);
                                void setEnableBreakdown(in boolean pValue);
                                boolean breakdownIsEnabled();
                        };
                        interface BioDriver{
                                boolean isPaused();
                                boolean isStarted();
                                void spawnSimulation();
                                void spawnSimulationAndRun();
                                void spawnSimulationAndRunTillDead();
                                void spawnSimulationAndRunTillN(in long nTicks);
                                void pauseSimulation();
                                void endSimulation();
                                boolean simulationHasStarted();
                                void advanceOneTick();
                                void resumeSimulation();
                                void setLogging(in boolean pLogSim);
                                boolean isLogging();
                                void setDriverPauseLength(in long pDriverPauseLength);
                                long getDriverPauseLength();
                                string getName();
                                boolean isDone();
                                long getTicks();
                                void reset();
                                boolean isLooping();
                                void setLooping(in boolean pLoop);
                                void setInitialization(in BioDriverInit myInit);
                                void setStochasticIntensity(in StochasticIntensity pIntensity);
                                void startMalfunction(in MalfunctionIntensity pIntensity, in MalfunctionLength pLength);
                        };
                        interface PowerConsumer{
                                void setPowerInputMaxFlowRate(in float watts, in long index);
                                float getPowerInputMaxFlowRate(in long index);
                                void setPowerInputDesiredFlowRate(in float watts, in long index);
                                float getPowerInputDesiredFlowRate(in long index);
                                float getPowerInputActualFlowRate(in long index);
                                void setPowerInputs(in biosim::idl::simulation::power::PowerStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::power::PowerStoreList getPowerInputs();
                        };
                        interface PowerProducer{
                                void setPowerOutputMaxFlowRate(in float watts, in long index);
                                float getPowerOutputMaxFlowRate(in long index);
                                void setPowerOutputDesiredFlowRate(in float watts, in long index);
                                float getPowerOutputDesiredFlowRate(in long index);
                                float getPowerOutputActualFlowRate(in long index);
                                void setPowerOutputs(in biosim::idl::simulation::power::PowerStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::power::PowerStoreList getPowerOutputs();
                        };
                        interface PotableWaterConsumer{
                                void setPotableWaterInputMaxFlowRate(in float liters, in long index);
                                float getPotableWaterInputMaxFlowRate(in long index);
                                void setPotableWaterInputDesiredFlowRate(in float liters, in long index);
                                float getPotableWaterInputDesiredFlowRate(in long index);
                                float getPotableWaterInputActualFlowRate(in long index);
                                void setPotableWaterInputs(in biosim::idl::simulation::water::PotableWaterStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::water::PotableWaterStoreList getPotableWaterInputs();
                        };
                        interface GreyWaterConsumer{
                                void setGreyWaterInputMaxFlowRate(in float liters, in long index);
                                float getGreyWaterInputMaxFlowRate(in long index);
                                void setGreyWaterInputDesiredFlowRate(in float liters, in long index);
                                float getGreyWaterInputDesiredFlowRate(in long index);
                                float getGreyWaterInputActualFlowRate(in long index);
                                void setGreyWaterInputs(in biosim::idl::simulation::water::GreyWaterStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::water::GreyWaterStoreList getGreyWaterInputs();
                        };
                        interface DirtyWaterConsumer{
                                void setDirtyWaterInputMaxFlowRate(in float liters, in long index);
                                float getDirtyWaterInputMaxFlowRate(in long index);
                                void setDirtyWaterInputDesiredFlowRate(in float liters, in long index);
                                float getDirtyWaterInputDesiredFlowRate(in long index);
                                float getDirtyWaterInputActualFlowRate(in long index);
                                void setDirtyWaterInputs(in biosim::idl::simulation::water::DirtyWaterStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::water::DirtyWaterStoreList getDirtyWaterInputs();
                        };
                        interface PotableWaterProducer{
                                void setPotableWaterOutputMaxFlowRate(in float liters, in long index);
                                float getPotableWaterOutputMaxFlowRate(in long index);
                                void setPotableWaterOutputDesiredFlowRate(in float liters, in long index);
                                float getPotableWaterOutputDesiredFlowRate(in long index);
                                float getPotableWaterOutputActualFlowRate(in long index);
                                void setPotableWaterOutputs(in biosim::idl::simulation::water::PotableWaterStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::water::PotableWaterStoreList getPotableWaterOutputs();
                        };
                        interface GreyWaterProducer{
                                void setGreyWaterOutputMaxFlowRate(in float liters, in long index);
                                float getGreyWaterOutputMaxFlowRate(in long index);
                                void setGreyWaterOutputDesiredFlowRate(in float liters, in long index);
                                float getGreyWaterOutputDesiredFlowRate(in long index);
                                float getGreyWaterOutputActualFlowRate(in long index);
                                void setGreyWaterOutputs(in biosim::idl::simulation::water::GreyWaterStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::water::GreyWaterStoreList getGreyWaterOutputs();
                        };
                        interface DirtyWaterProducer{
                                void setDirtyWaterOutputMaxFlowRate(in float liters, in long index);
                                float getDirtyWaterOutputMaxFlowRate(in long index);
                                void setDirtyWaterOutputDesiredFlowRate(in float liters, in long index);
                                float getDirtyWaterOutputDesiredFlowRate(in long index);
                                float getDirtyWaterOutputActualFlowRate(in long index);
                                void setDirtyWaterOutputs(in biosim::idl::simulation::water::DirtyWaterStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::water::DirtyWaterStoreList getDirtyWaterOutputs();
                        };
                        interface AirConsumer{
                                void setAirInputMaxFlowRate(in float liters, in long index);
                                float getAirInputMaxFlowRate(in long index);
                                void setAirInputDesiredFlowRate(in float liters, in long index);
                                float getAirInputDesiredFlowRate(in long index);
                                float getAirInputActualFlowRate(in long index);
                                void setAirInputs(in biosim::idl::simulation::environment::SimEnvironmentList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::environment::SimEnvironmentList getAirInputs();
                        };
                        interface LightConsumer{
                                void setLightInput(in biosim::idl::simulation::environment::SimEnvironment source);
                                biosim::idl::simulation::environment::SimEnvironment getLightInput();
                        };
                        interface O2AirConsumer{
                                void setO2AirStoreInputMaxFlowRate(in float liters, in long index);
                                void setO2AirEnvironmentInputMaxFlowRate(in float liters, in long index);
                                float getO2AirStoreInputMaxFlowRate(in long index);
                                float getO2AirEnvironmentInputMaxFlowRate(in long index);
                                void setO2AirStoreInputDesiredFlowRate(in float liters, in long index);
                                void setO2AirEnvironmentInputDesiredFlowRate(in float liters, in long index);
                                float getO2AirStoreInputDesiredFlowRate(in long index);
                                float getO2AirEnvironmentInputDesiredFlowRate(in long index);
                                float getO2AirStoreInputActualFlowRate(in long index);
                                float getO2AirEnvironmentInputActualFlowRate(in long index);
                                void setO2AirEnvironmentInputs(in biosim::idl::simulation::environment::SimEnvironmentList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                void setO2AirStoreInputs(in biosim::idl::simulation::air::O2StoreList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::air::O2StoreList getO2AirStoreInputs();
                                biosim::idl::simulation::environment::SimEnvironmentList getO2AirEnvironmentInputs();
                        };
                        interface CO2AirConsumer{
                                void setCO2AirStoreInputMaxFlowRate(in float liters, in long index);
                                void setCO2AirEnvironmentInputMaxFlowRate(in float liters, in long index);
                                float getCO2AirStoreInputMaxFlowRate(in long index);
                                float getCO2AirEnvironmentInputMaxFlowRate(in long index);
                                void setCO2AirStoreInputDesiredFlowRate(in float liters, in long index);
                                void setCO2AirEnvironmentInputDesiredFlowRate(in float liters, in long index);
                                float getCO2AirStoreInputDesiredFlowRate(in long index);
                                float getCO2AirEnvironmentInputDesiredFlowRate(in long index);
                                float getCO2AirStoreInputActualFlowRate(in long index);
                                float getCO2AirEnvironmentInputActualFlowRate(in long index);
                                void setCO2AirEnvironmentInputs(in biosim::idl::simulation::environment::SimEnvironmentList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                void setCO2AirStoreInputs(in biosim::idl::simulation::air::CO2StoreList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::air::CO2StoreList getCO2AirStoreInputs();
                                biosim::idl::simulation::environment::SimEnvironmentList getCO2AirEnvironmentInputs();
                        };
                        interface AirProducer{
                                void setAirOutputMaxFlowRate(in float liters, in long index);
                                float getAirOutputMaxFlowRate(in long index);
                                void setAirOutputDesiredFlowRate(in float liters, in long index);
                                float getAirOutputDesiredFlowRate(in long index);
                                float getAirOutputActualFlowRate(in long index);
                                void setAirOutputs(in biosim::idl::simulation::environment::SimEnvironmentList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::environment::SimEnvironmentList getAirOutputs();
                        };
                        interface O2AirProducer{
                                void setO2AirStoreOutputMaxFlowRate(in float liters, in long index);
                                void setO2AirEnvironmentOutputMaxFlowRate(in float liters, in long index);
                                float getO2AirStoreOutputMaxFlowRate(in long index);
                                float getO2AirEnvironmentOutputMaxFlowRate(in long index);
                                void setO2AirStoreOutputDesiredFlowRate(in float liters, in long index);
                                void setO2AirEnvironmentOutputDesiredFlowRate(in float liters, in long index);
                                float getO2AirStoreOutputDesiredFlowRate(in long index);
                                float getO2AirEnvironmentOutputDesiredFlowRate(in long index);
                                float getO2AirStoreOutputActualFlowRate(in long index);
                                float getO2AirEnvironmentOutputActualFlowRate(in long index);
                                void setO2AirEnvironmentOutputs(in biosim::idl::simulation::environment::SimEnvironmentList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                void setO2AirStoreOutputs(in biosim::idl::simulation::air::O2StoreList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::air::O2StoreList getO2AirStoreOutputs();
                                biosim::idl::simulation::environment::SimEnvironmentList getO2AirEnvironmentOutputs();
                        };
                        interface CO2AirProducer{
                                void setCO2AirStoreOutputMaxFlowRate(in float liters, in long index);
                                void setCO2AirEnvironmentOutputMaxFlowRate(in float liters, in long index);
                                float getCO2AirStoreOutputMaxFlowRate(in long index);
                                float getCO2AirEnvironmentOutputMaxFlowRate(in long index);
                                void setCO2AirStoreOutputDesiredFlowRate(in float liters, in long index);
                                void setCO2AirEnvironmentOutputDesiredFlowRate(in float liters, in long index);
                                float getCO2AirStoreOutputDesiredFlowRate(in long index);
                                float getCO2AirEnvironmentOutputDesiredFlowRate(in long index);
                                float getCO2AirStoreOutputActualFlowRate(in long index);
                                float getCO2AirEnvironmentOutputActualFlowRate(in long index);
                                void setCO2AirEnvironmentOutputs(in biosim::idl::simulation::environment::SimEnvironmentList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                void setCO2AirStoreOutputs(in biosim::idl::simulation::air::CO2StoreList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::air::CO2StoreList getCO2AirStoreOutputs();
                                biosim::idl::simulation::environment::SimEnvironmentList getCO2AirEnvironmentOutputs();
                        };
                        interface BiomassConsumer{
                                void setBiomassInputMaxFlowRate(in float kilograms, in long index);
                                float getBiomassInputMaxFlowRate(in long index);
                                void setBiomassInputDesiredFlowRate(in float kilograms, in long index);
                                float getBiomassInputDesiredFlowRate(in long index);
                                float getBiomassInputActualFlowRate(in long index);
                                void setBiomassInputs(in biosim::idl::simulation::food::BiomassStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::food::BiomassStoreList getBiomassInputs();
                        };

                        interface FoodConsumer{
                                void setFoodInputMaxFlowRate(in float kilograms, in long index);
                                float getFoodInputMaxFlowRate(in long index);
                                void setFoodInputDesiredFlowRate(in float kilograms, in long index);
                                float getFoodInputDesiredFlowRate(in long index);
                                float getFoodInputActualFlowRate(in long index);
                                void setFoodInputs(in biosim::idl::simulation::food::FoodStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::food::FoodStoreList getFoodInputs();
                        };
                        interface BiomassProducer{
                                void setBiomassOutputMaxFlowRate(in float kilograms, in long index);
                                float getBiomassOutputMaxFlowRate(in long index);
                                void setBiomassOutputDesiredFlowRate(in float kilograms, in long index);
                                float getBiomassOutputDesiredFlowRate(in long index);
                                float getBiomassOutputActualFlowRate(in long index);
                                void setBiomassOutputs(in biosim::idl::simulation::food::BiomassStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::food::BiomassStoreList getBiomassOutputs();
                        };
                        interface FoodProducer{
                                void setFoodOutputMaxFlowRate(in float kilograms, in long index);
                                float getFoodOutputMaxFlowRate(in long index);
                                void setFoodOutputDesiredFlowRate(in float kilograms, in long index);
                                float getFoodOutputDesiredFlowRate(in long index);
                                float getFoodOutputActualFlowRate(in long index);
                                void setFoodOutputs(in biosim::idl::simulation::food::FoodStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::food::FoodStoreList getFoodOutputs();
                        };
                        interface O2Consumer{
                                void setO2InputMaxFlowRate(in float liters, in long index);
                                float getO2InputMaxFlowRate(in long index);
                                void setO2InputDesiredFlowRate(in float liters, in long index);
                                float getO2InputDesiredFlowRate(in long index);
                                float getO2InputActualFlowRate(in long index);
                                void setO2Inputs(in biosim::idl::simulation::air::O2StoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::air::O2StoreList getO2Inputs();
                        };
                        interface CO2Consumer{
                                void setCO2InputMaxFlowRate(in float liters, in long index);
                                float getCO2InputMaxFlowRate(in long index);
                                void setCO2InputDesiredFlowRate(in float liters, in long index);
                                float getCO2InputDesiredFlowRate(in long index);
                                float getCO2InputActualFlowRate(in long index);
                                void setCO2Inputs(in biosim::idl::simulation::air::CO2StoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::air::CO2StoreList getCO2Inputs();
                        };
                        interface O2Producer{
                                void setO2OutputMaxFlowRate(in float liters, in long index);
                                float getO2OutputMaxFlowRate(in long index);
                                void setO2OutputDesiredFlowRate(in float liters, in long index);
                                float getO2OutputDesiredFlowRate(in long index);
                                float getO2OutputActualFlowRate(in long index);
                                void setO2Outputs(in biosim::idl::simulation::air::O2StoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::air::O2StoreList getO2Outputs();
                        };
                        interface CO2Producer{
                                void setCO2OutputMaxFlowRate(in float liters, in long index);
                                float getCO2OutputMaxFlowRate(in long index);
                                void setCO2OutputDesiredFlowRate(in float liters, in long index);
                                float getCO2OutputDesiredFlowRate(in long index);
                                float getCO2OutputActualFlowRate(in long index);
                                void setCO2Outputs(in biosim::idl::simulation::air::CO2StoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                biosim::idl::simulation::air::CO2StoreList getCO2Outputs();
                        };
                };
                module util{
                        module log{
                                interface Logger{
                                        void processLog(in LogNode thingToLog);
                                        LogHandlerTypeList getLogHandlerTypes();
                                        void addLogHandlerType(in LogHandlerType pLogType);
                                        void setProcessingLogs(in boolean pAllowLogging);
                                        boolean isProcessingLogs();
                                        string getName();
                                };
                                interface LogNode{
                                        LogNode getHead();
                                        string getValue();
                                        void setValue(in string newValue);
                                        LogNode addChild (in string pChildName);
                                        LogNodeList getChildren();
                                        boolean hasChildren();
                                        LogNode getChildDeep(in string pName);
                                        LogNode getChildShallow(in string pName);
                                };
                        };
                };
                module simulation{
                        module framework{
                                interface Store : biosim::idl::framework::BioModule{
                                        void setCapacity(in float metricAmount);
                                        void setLevel(in float metricAmount);
                                        float add(in float metricAmount);
                                        float take(in float metricAmount);
                                        float getLevel();
                                        float getCapacity();
                                        boolean isPipe();
                                        void setPipe(in boolean pPipe);
                                };
                                interface SimBioModule : biosim::idl::framework::BioModule{};
                                interface Injector : framework::SimBioModule, framework::PowerConsumer, framework::PotableWaterConsumer, framework::GreyWaterConsumer, framework::DirtyWaterConsumer, framework::O2Consumer, framework::CO2Consumer, framework::AirConsumer, framework::BiomassConsumer, framework::FoodConsumer, framework::O2AirConsumer, framework::CO2AirConsumer, framework::PowerProducer, framework::PotableWaterProducer, framework::GreyWaterProducer, framework::DirtyWaterProducer, framework::O2Producer, framework::CO2Producer, framework::AirProducer, framework::BiomassProducer, framework::FoodProducer, framework::O2AirProducer, framework::CO2AirProducer{};
                                interface Accumulator : framework::SimBioModule, framework::PowerConsumer, framework::PotableWaterConsumer, framework::GreyWaterConsumer, framework::DirtyWaterConsumer, framework::O2Consumer, framework::CO2Consumer, framework::AirConsumer, framework::BiomassConsumer, framework::FoodConsumer, framework::O2AirConsumer, framework::CO2AirConsumer, framework::PowerProducer, framework::PotableWaterProducer, framework::GreyWaterProducer, framework::DirtyWaterProducer, framework::O2Producer, framework::CO2Producer, framework::AirProducer, framework::BiomassProducer, framework::FoodProducer, framework::O2AirProducer, framework::CO2AirProducer{};
                        };
                        module crew{
                                interface Activity{
                                        string getName();
                                        long getTimeLength();
                                        long getActivityIntensity();
                                };
                                interface RepairActivity : Activity{
                                        string getModuleNameToRepair();
                                        long long getMalfunctionIDToRepair();
                                };
                                interface MaitenanceActivity : Activity{
                                        string getModuleToMaitenance();
                                };
                                interface CrewPerson{
                                        Activity getCurrentActivity();
                                        void setCurrentActivity(in Activity newActivity);
                                        long getOrderOfScheduledActivity(in string name);
                                        void insertActivityInSchedule(in Activity newActivity, in long order);
                                        void insertActivityInScheduleNow(in Activity newActivity);
                                        void sicken();
                                        string getName();
                                        float getAge();
                                        float getWeight();
                                        long getTimeActivityPerformed();
                                        Sex getSex();
                                        boolean isStarving();
                                        boolean isPoisoned();
                                        boolean isThirsty();
                                        boolean isSick();
                                        boolean isSuffocating();
                                        boolean isDead();
                                        float getGreyWaterProduced();
                                        float getDirtyWaterProduced();
                                        float getPotableWaterConsumed();
                                        float getFoodConsumed();
                                        float getCO2Produced();
                                        float getO2Consumed();
                                        Activity getActivityByName(in string name);
                                        Activity getScheduledActivityByOrder(in long order);
                                };
                                interface CrewGroup : biosim::idl::simulation::framework::SimBioModule, biosim::idl::simulation::framework::AirConsumer, biosim::idl::simulation::framework::PotableWaterConsumer, biosim::idl::simulation::framework::FoodConsumer, biosim::idl::simulation::framework::AirProducer, biosim::idl::simulation::framework::GreyWaterProducer, biosim::idl::simulation::framework::DirtyWaterProducer{
                                        CrewPerson getCrewPerson(in string name);
                                        CrewPerson createCrewPerson(in string name, in float age, in float weight, in Sex pSex);
                                        CrewPersonList getCrewPeople();
                                        void scheduleRepair(in string moduleName, in long long malfunctionID, in long timeLength);
                                        long getCrewSize();
                                        float getGreyWaterProduced();
                                        float getDirtyWaterProduced();
                                        float getPotableWaterConsumed();
                                        float getFoodConsumed();
                                        float getCO2Produced();
                                        float getO2Consumed();
                                        boolean isDead();
                                };
                        };

                        module environment{
                                interface SimEnvironment : biosim::idl::simulation::framework::SimBioModule{
                                        void setCO2Moles(in float moles);
                                        void setO2Moles(in float moles);
                                        void setOtherMoles(in float moles);
                                        void setWaterMoles(in float moles);
                                        void setCO2Pressure(in float kPA);
                                        void setO2Pressure(in float kPA);
                                        void setOtherPressure(in float kPA);
                                        void setWaterPressure(in float kPA);
                                        void setInitialVolume(in float pInitialCO2Moles, in float pInitialO2Moles, in float pInitialOtherMoles, in float pInitialWaterMoles, in float pInitialVolume);
                                        void setInitialVolumeAtSeaLevel(in float pInitialVolume);
                                        float getO2Moles();
                                        float getCO2Moles();
                                        float getOtherMoles();
                                        float getWaterMoles();
                                        float getTotalMoles();
                                        float getO2Pressure();
                                        float getCO2Pressure();
                                        float getOtherPressure();
                                        float getWaterPressure();
                                        float getTotalPressure();
                                        float getRelativeHumidity();
                                        float getWaterDensity();
                                        float addCO2Moles(in float moles);
                                        float addO2Moles(in float moles);
                                        float addOtherMoles(in float moles);
                                        float addWaterMoles(in float moles);
                                        float takeCO2Moles(in float moles);
                                        float takeO2Moles(in float moles);
                                        float takeOtherMoles(in float moles);
                                        float takeWaterMoles(in float moles);
                                        float getTemperature();
                                        air::Breath addBreath(in air::Breath pBreath);
                                        float getLightIntensity();
                                        air::Breath takeO2Breath(in float moles);
                                        air::Breath takeCO2Breath(in float moles);
                                        air::Breath takeAirMoles(in float moles);
                                        long getTicks();
                                        void setTotalMoles(in float moles);
                                        void setTotalPressure(in float moles);
                                };
                        };
                        module food{
                                interface BiomassRS : biosim::idl::simulation::framework::SimBioModule, biosim::idl::simulation::framework::PowerConsumer, biosim::idl::simulation::framework::PotableWaterConsumer, biosim::idl::simulation::framework::GreyWaterConsumer, biosim::idl::simulation::framework::BiomassProducer, biosim::idl::simulation::framework::AirConsumer, biosim::idl::simulation::framework::AirProducer{
                                        ShelfList getShelves();
                                        Shelf createNewShelf(in PlantType pType, in float pCropArea);
                                };

                                interface FoodProcessor : biosim::idl::simulation::framework::SimBioModule, biosim::idl::simulation::framework::PowerConsumer, biosim::idl::simulation::framework::BiomassConsumer, biosim::idl::simulation::framework::FoodProducer{
                                        float getBiomassConsumed();
                                        float getPowerConsumed();
                                        float getFoodProduced();
                                        boolean hasPower();
                                        boolean hasBiomass();
                                };

                                interface FoodStore : biosim::idl::simulation::framework::Store{
                                };

                                interface BiomassStore : biosim::idl::simulation::framework::Store{
                                        //float addBiomatter(in float mass, in PlantType type);
                                        //BioMatterList takeBiomatter(in float mass);
                                        //void setCapacity(in float metricAmount);
                                        //void setLevel(in float metricAmount);
                                        //float getLevel();
                                        //float getCapacity();
                                };

                                interface Shelf{
                                        void harvest();
                                        void replant(in PlantType pType);
                                };

                                interface Plant{
                                };

                        };
                        module power{
                                interface PowerPS : biosim::idl::simulation::framework::SimBioModule, biosim::idl::simulation::framework::PowerProducer, biosim::idl::simulation::framework::LightConsumer{
                                        float getPowerProduced();
                                };
                                interface PowerStore : biosim::idl::simulation::framework::Store{
                                };
                        };
                        module air{
                                interface AirRS : biosim::idl::simulation::framework::SimBioModule, biosim::idl::simulation::framework::PowerConsumer, biosim::idl::simulation::framework::AirConsumer, biosim::idl::simulation::framework::AirProducer, biosim::idl::simulation::framework::CO2Producer, biosim::idl::simulation::framework::O2Producer, biosim::idl::simulation::framework::CO2Consumer{
                                        float getPowerConsumed();
                                        float getCO2Consumed();
                                        float getO2Produced();
                                        float getCO2Produced();
                                        boolean VCCRHasPower();
                                        boolean VCCRHasEnoughAir();
                                        boolean CRSHasPower();
                                        boolean CRSHasEnoughCO2();
                                        boolean CRSHasEnoughH2();
                                        boolean OGSHasPower();
                                        boolean OGSHasEnoughH2O();
                                };
                                interface O2Store : biosim::idl::simulation::framework::Store{
                                };
                                interface CO2Store : biosim::idl::simulation::framework::Store{
                                };
                        };
                        module water{
                                interface WaterRS : biosim::idl::simulation::framework::SimBioModule, biosim::idl::simulation::framework::PowerConsumer, biosim::idl::simulation::framework::GreyWaterConsumer, biosim::idl::simulation::framework::DirtyWaterConsumer, biosim::idl::simulation::framework::PotableWaterProducer{
                                        float getPotableWaterProduced();
                                        float getGreyWaterProduced();
                                        float getPowerConsumed();
                                        float getDirtyWaterConsumed();
                                        float getGreyWaterConsumed();
                                        void setROEnabled(in boolean pEnabled);
                                        void setAESEnabled(in boolean pEnabled);
                                        boolean ROIsEnabled();
                                        boolean AESIsEnabled();
                                        boolean ROHasPower();
                                        boolean AESHasPower();
                                        boolean PPSHasPower();
                                        boolean BWPHasPower();
                                        boolean ROHasWater();
                                        boolean AESHasWater();
                                        boolean PPSHasWater();
                                        boolean BWPHasWater();
                                        float getAEStoPPSWater();
                                        float getROtoPPSWater();
                                        float getROtoAESWater();
                                        float getBWPtoROWater();
                                        float getBWPtoAESWater();
                                };
                                interface PotableWaterStore : biosim::idl::simulation::framework::Store{
                                };
                                interface GreyWaterStore : biosim::idl::simulation::framework::Store{
                                };
                                interface DirtyWaterStore : biosim::idl::simulation::framework::Store{
                                };
                        };
                };
                module sensor{
                        module framework{
                                interface GenericSensor : biosim::idl::framework::BioModule{
                                        double getValue();
                                };
                        };
                        module air{
                                interface O2StoreSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::air::O2Store source);
                                        biosim::idl::simulation::air::O2Store getInput();
                                };
                                interface CO2StoreSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::air::CO2Store source);
                                        biosim::idl::simulation::air::CO2Store getInput();
                                };
                                interface AirRSSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::air::AirRS source);
                                        biosim::idl::simulation::air::AirRS getInput();
                                };
                                interface O2StoreLevelSensor : O2StoreSensor{};
                                interface CO2StoreLevelSensor : CO2StoreSensor{};
                                interface O2InFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::O2Consumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::O2Consumer getInput();
                                        long getIndex();
                                };
                                interface O2OutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::O2Producer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::O2Producer getInput();
                                        long getIndex();
                                };
                                interface CO2InFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::CO2Consumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::CO2Consumer getInput();
                                        long getIndex();
                                };
                                interface CO2OutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::CO2Producer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::CO2Producer getInput();
                                        long getIndex();
                                };
                        };
                        module crew{
                                interface CrewSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::crew::CrewGroup source);
                                        biosim::idl::simulation::crew::CrewGroup getInput();
                                };
                                interface CrewActivitySensor : CrewSensor{};
                        };
                        module environment{
                                interface EnvironmentSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::environment::SimEnvironment source);
                                        biosim::idl::simulation::environment::SimEnvironment getInput();
                                };
                                interface AirMolesSensor : EnvironmentSensor{};
                                interface LightLevelSensor : EnvironmentSensor{};
                                interface O2AirMolesSensor : EnvironmentSensor{};
                                interface CO2AirMolesSensor : EnvironmentSensor{};
                                interface OtherAirMolesSensor : EnvironmentSensor{};

                                interface AirInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::AirConsumer getInput();
                                        long getIndex();
                                };
                                interface AirOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::AirProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::AirProducer getInput();
                                        long getIndex();
                                };

                                interface O2AirStoreInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::O2AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::O2AirConsumer getInput();
                                        long getIndex();
                                };
                                interface O2AirStoreOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::O2AirProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::O2AirProducer getInput();
                                        long getIndex();
                                };
                                interface O2AirEnvironmentInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::O2AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::O2AirConsumer getInput();
                                        long getIndex();
                                };
                                interface O2AirEnvironmentOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::O2AirProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::O2AirProducer getInput();
                                        long getIndex();
                                };

                                interface CO2AirStoreInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::CO2AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::CO2AirConsumer getInput();
                                        long getIndex();
                                };
                                interface CO2AirStoreOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::CO2AirProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::CO2AirProducer getInput();
                                        long getIndex();
                                };
                                interface CO2AirEnvironmentInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::CO2AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::CO2AirConsumer getInput();
                                        long getIndex();
                                };
                                interface CO2AirEnvironmentOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::CO2AirProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::CO2AirProducer getInput();
                                        long getIndex();
                                };

                        };
                        module food{
                                interface BiomassStoreSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::food::BiomassStore source);
                                        biosim::idl::simulation::food::BiomassStore getInput();
                                };
                                interface BiomassStoreLevelSensor : BiomassStoreSensor{};
                                interface FoodStoreSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::food::FoodStore source);
                                        biosim::idl::simulation::food::FoodStore getInput();
                                };
                                interface FoodStoreLevelSensor : FoodStoreSensor{};

                                interface BiomassRSSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::food::BiomassRS source);
                                        biosim::idl::simulation::food::BiomassRS getInput();
                                };

                                interface FoodProcessorSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::food::FoodProcessor source);
                                        biosim::idl::simulation::food::FoodProcessor getInput();
                                };

                                interface BiomassInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::BiomassConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::BiomassConsumer getInput();
                                        long getIndex();
                                };
                                interface BiomassOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::BiomassProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::BiomassProducer getInput();
                                        long getIndex();
                                };

                                interface FoodInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::FoodConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::FoodConsumer getInput();
                                        long getIndex();
                                };
                                interface FoodOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::FoodProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::FoodProducer getInput();
                                        long getIndex();
                                };
                        };
                        module power{
                                interface PowerPSSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::power::PowerPS source);
                                        biosim::idl::simulation::power::PowerPS getInput();
                                };
                                interface PowerStoreSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::power::PowerStore source);
                                        biosim::idl::simulation::power::PowerStore getInput();
                                };
				
                                interface PowerStoreLevelSensor : PowerStoreSensor{};

                                interface PowerInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::PowerConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::PowerConsumer getInput();
                                        long getIndex();
                                };
                                interface PowerOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::PowerProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::PowerProducer getInput();
                                        long getIndex();
                                };
                        };
                        module water{
                                interface WaterRSSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::water::WaterRS source);
                                        biosim::idl::simulation::water::WaterRS getInput();
                                };
                                interface PotableWaterStoreSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::water::PotableWaterStore source);
                                        biosim::idl::simulation::water::PotableWaterStore getInput();
                                };
                                interface GreyWaterStoreSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::water::GreyWaterStore source);
                                        biosim::idl::simulation::water::GreyWaterStore getInput();
                                };
                                interface DirtyWaterStoreSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::simulation::water::DirtyWaterStore source);
                                        biosim::idl::simulation::water::DirtyWaterStore getInput();
                                };
                                interface PotableWaterStoreLevelSensor : PotableWaterStoreSensor{};
                                interface GreyWaterStoreLevelSensor : GreyWaterStoreSensor{};
                                interface DirtyWaterStoreLevelSensor : DirtyWaterStoreSensor{};

                                interface PotableWaterInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::PotableWaterConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::PotableWaterConsumer getInput();
                                        long getIndex();
                                };
                                interface PotableWaterOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::PotableWaterProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::PotableWaterProducer getInput();
                                        long getIndex();
                                };

                                interface GreyWaterInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::GreyWaterConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::GreyWaterConsumer getInput();
                                        long getIndex();
                                };
                                interface GreyWaterOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::GreyWaterProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::GreyWaterProducer getInput();
                                        long getIndex();
                                };

                                interface DirtyWaterInFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::DirtyWaterConsumer pConsumer, in long pIndex);
                                        biosim::idl::sensor::framework::DirtyWaterConsumer getInput();
                                        long getIndex();
                                };
                                interface DirtyWaterOutFlowRateSensor : biosim::idl::sensor::framework::GenericSensor{
                                        void setInput(in biosim::idl::framework::DirtyWaterProducer pProducer, in long pIndex);
                                        biosim::idl::sensor::framework::DirtyWaterProducer getInput();
                                        long getIndex();
                                };
                        };
                };
                module actuator{
                        module framework{
                                interface GenericActuator : biosim::idl::framework::BioModule{
                                        void setValue(in float pValue);
                                        float getValue();
                                };
                        };
                        module air{
                                interface O2StoreActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::air::O2Store source);
                                        biosim::idl::simulation::air::O2Store getOutput();
                                };
                                interface CO2StoreActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::air::CO2Store source);
                                        biosim::idl::simulation::air::CO2Store getOutput();
                                };
                                interface AirRSActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::air::AirRS source);
                                        biosim::idl::simulation::air::AirRS getOutput();
                                };
                                interface O2StoreLevelActuator : O2StoreActuator{};
                                interface CO2StoreLevelActuator : CO2StoreActuator{};
                                interface O2InFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::O2Consumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::O2Consumer getOutput();
                                        long getIndex();
                                };
                                interface O2OutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::O2Producer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::O2Producer getOutput();
                                        long getIndex();
                                };
                                interface CO2InFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::CO2Consumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::CO2Consumer getOutput();
                                        long getIndex();
                                };
                                interface CO2OutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::CO2Producer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::CO2Producer getOutput();
                                        long getIndex();
                                };
                        };
                        module crew{
                                interface CrewActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::crew::CrewGroup source);
                                        biosim::idl::simulation::crew::CrewGroup getOutput();
                                };
                                interface CrewActivityActuator : CrewActuator{};
                        };
                        module environment{
                                interface EnvironmentActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::environment::SimEnvironment source);
                                        biosim::idl::simulation::environment::SimEnvironment getOutput();
                                };
                                interface AirMolesActuator : EnvironmentActuator{};
                                interface LightLevelActuator : EnvironmentActuator{};
                                interface O2AirMolesActuator : EnvironmentActuator{};
                                interface CO2AirMolesActuator : EnvironmentActuator{};
                                interface OtherAirMolesActuator : EnvironmentActuator{};

                                interface AirInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface AirOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::AirProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::AirProducer getOutput();
                                        long getIndex();
                                };

                                interface O2AirStoreInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::O2AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::O2AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface O2AirStoreOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::O2AirProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::O2AirProducer getOutput();
                                        long getIndex();
                                };
                                interface O2AirEnvironmentInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::O2AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::O2AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface O2AirEnvironmentOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::O2AirProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::O2AirProducer getOutput();
                                        long getIndex();
                                };

                                interface CO2AirStoreInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::CO2AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::CO2AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface CO2AirStoreOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::CO2AirProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::CO2AirProducer getOutput();
                                        long getIndex();
                                };
                                interface CO2AirEnvironmentInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::CO2AirConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::CO2AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface CO2AirEnvironmentOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::CO2AirProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::CO2AirProducer getOutput();
                                        long getIndex();
                                };

                        };
                        module food{
                                interface BiomassStoreActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::food::BiomassStore source);
                                        biosim::idl::simulation::food::BiomassStore getOutput();
                                };
                                interface BiomassStoreLevelActuator : BiomassStoreActuator{};
                                interface FoodStoreActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::food::FoodStore source);
                                        biosim::idl::simulation::food::FoodStore getOutput();
                                };
                                interface FoodStoreLevelActuator : FoodStoreActuator{};

                                interface BiomassRSActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::food::BiomassRS source);
                                        biosim::idl::simulation::food::BiomassRS getOutput();
                                };

                                interface FoodProcessorActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::food::FoodProcessor source);
                                        biosim::idl::simulation::food::FoodProcessor getOutput();
                                };

                                interface BiomassInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::BiomassConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::BiomassConsumer getOutput();
                                        long getIndex();
                                };
                                interface BiomassOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::BiomassProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::BiomassProducer getOutput();
                                        long getIndex();
                                };

                                interface FoodInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::FoodConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::FoodConsumer getOutput();
                                        long getIndex();
                                };
                                interface FoodOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::FoodProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::FoodProducer getOutput();
                                        long getIndex();
                                };
                        };
                        module power{
                                interface PowerPSActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::power::PowerPS source);
                                        biosim::idl::simulation::power::PowerPS getOutput();
                                };
                                interface PowerStoreActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::power::PowerStore source);
                                        biosim::idl::simulation::power::PowerStore getOutput();
                                };
                                interface PowerStoreLevelActuator : PowerStoreActuator{};

                                interface PowerInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::PowerConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::PowerConsumer getOutput();
                                        long getIndex();
                                };
                                interface PowerOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::PowerProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::PowerProducer getOutput();
                                        long getIndex();
                                };
                        };
                        module water{
                                interface WaterRSActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::water::WaterRS source);
                                        biosim::idl::simulation::water::WaterRS getOutput();
                                };
                                interface PotableWaterStoreActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::water::PotableWaterStore source);
                                        biosim::idl::simulation::water::PotableWaterStore getOutput();
                                };
                                interface GreyWaterStoreActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::water::GreyWaterStore source);
                                        biosim::idl::simulation::water::GreyWaterStore getOutput();
                                };
                                interface DirtyWaterStoreActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::simulation::water::DirtyWaterStore source);
                                        biosim::idl::simulation::water::DirtyWaterStore getOutput();
                                };
                                interface PotableWaterStoreLevelActuator : PotableWaterStoreActuator{};
                                interface GreyWaterStoreLevelActuator : GreyWaterStoreActuator{};
                                interface DirtyWaterStoreLevelActuator : DirtyWaterStoreActuator{};

                                interface PotableWaterInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::PotableWaterConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::PotableWaterConsumer getOutput();
                                        long getIndex();
                                };
                                interface PotableWaterOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::PotableWaterProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::PotableWaterProducer getOutput();
                                        long getIndex();
                                };

                                interface GreyWaterInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::GreyWaterConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::GreyWaterConsumer getOutput();
                                        long getIndex();
                                };
                                interface GreyWaterOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::GreyWaterProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::GreyWaterProducer getOutput();
                                        long getIndex();
                                };

                                interface DirtyWaterInFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::DirtyWaterConsumer pConsumer, in long pIndex);
                                        biosim::idl::actuator::framework::DirtyWaterConsumer getOutput();
                                        long getIndex();
                                };
                                interface DirtyWaterOutFlowRateActuator : biosim::idl::actuator::framework::GenericActuator{
                                        void setOutput(in biosim::idl::framework::DirtyWaterProducer pProducer, in long pIndex);
                                        biosim::idl::actuator::framework::DirtyWaterProducer getOutput();
                                        long getIndex();
                                };
                        };
                };
        };
};

