module biosim{
        module idl{
                typedef sequence <string> StringList;

                module framework{
			enum BioDriverInit {DEFAULT_INIT, OPTIMAL_INIT, NO_INIT};
			enum StochasticIntensity {HIGH_STOCH, MEDIUM_STOCH, LOW_STOCH, NONE_STOCH};
			enum MalfunctionIntensity {SEVERE_MALF, MEDIUM_MALF, LOW_MALF};
			enum MalfunctionLength {TEMPORARY_MALF, PERMANENT_MALF};
			
			interface Malfunction{
				MalfunctionIntensity getIntensity();
				long long getID();
				string getName();
				boolean hasPerformed();
				void setPerformed(in boolean pPerformed);
				MalfunctionLength getLength();
				void repair();
				boolean isRepaired();
			};
			
			typedef sequence <Malfunction> MalfunctionList;
			
                        interface BioModule{
                                void tick();
                                string getModuleName();
                                void reset();
                                void setLogging(in boolean pLogging);
                                boolean isLogging();
				void setStochasticIntensity(in StochasticIntensity pIntensity);
				StochasticIntensity getStochasticIntensity();
				Malfunction startMalfunction(in MalfunctionIntensity pIntensity, in MalfunctionLength pLength);
				void fixMalfunction(in long long id);
				void fixAllMalfunctions();
				boolean isMalfunctioning();
				StringList getMalfunctionNames();
				MalfunctionList getMalfunctions();
				void maitenance();
				void repair(in long long id);
                        };
			
                        interface Store : BioModule{
                                void setCapacity(in float metricAmount);
                                void setLevel(in float metricAmount);
                                float add(in float metricAmount);
                                float take(in float metricAmount);
                                float getLevel();
                                float getCapacity();
                        };

                        interface BioDriver{
                                boolean isPaused();
                                boolean isStarted();
                                void spawnSimulation();
                                void spawnSimulationTillDead();
                                void spawnSimulationTillN(in long nTicks);
                                void pauseSimulation();
                                void endSimulation();
                                boolean simulationHasStarted();
                                void advanceOneTick();
                                void resumeSimulation();
                                void setLogging(in boolean pLogSim);
                                boolean isLogging();
				void setDriverPauseLength(in long pDriverPauseLength);
				long getDriverPauseLength();
				string getName();
				boolean isDone();
				long getTicks();
				void reset();
				void setInitialization(in BioDriverInit myInit);
				void setStochasticIntensity(in StochasticIntensity pIntensity);
				void startMalfunction(in MalfunctionIntensity pIntensity, in MalfunctionLength pLength);
                        };
                };

                module util{
                        module log{
                                interface Logger;
                                interface LogNode;
                                enum LogHandlerType {SCREEN,XML,FLAT,DB};
                                typedef sequence <LogHandlerType> LogHandlerTypeList;
                                interface Logger{
                                        void processLog(in LogNode thingToLog);
                                        LogHandlerTypeList getLogHandlerTypes();
                                        void addLogHandlerType(in LogHandlerType pLogType);
                                        void setProcessingLogs(in boolean pAllowLogging);
                                        boolean isProcessingLogs();
					string getName();
                                };
                                typedef sequence <LogNode> LogNodeList;
                                interface LogNode{
                                        LogNode getHead();
                                        string getValue();
                                        void setValue(in string newValue);
                                        LogNode addChild (in string pChildName);
                                        LogNodeList getChildren();
                                        boolean hasChildren();
                                        LogNode getChildDeep(in string pName);
                                        LogNode getChildShallow(in string pName);
                                };
                        };
                };

                module crew{
                        interface Activity;
                        interface CrewPerson;
                        interface CrewGroup;
                        typedef sequence <CrewPerson> CrewPersonList;
                        enum Sex {male, female};
                        interface Activity{
                                string getName();
                                long getTimeLength();
                                long getActivityIntensity();
                        };
			interface RepairActivity : Activity{
				string getModuleNameToRepair();
				long long getMalfunctionIDToRepair();
			};
			interface MaitenanceActivity : Activity{
				string getModuleToMaitenance();
			};
                        interface CrewPerson{
                                Activity getCurrentActivity();
                                void setCurrentActivity(in Activity newActivity);
				long getOrderOfScheduledActivity(in string name);
				void insertActivityInSchedule(in Activity newActivity, in long order);
				void insertActivityInScheduleNow(in Activity newActivity);
                                void sicken();
				string getName();
                                float getAge();
                                float getWeight();
                                long getTimeActivityPerformed();
                                Sex getSex();
                                boolean isStarving();
                                boolean isPoisoned();
                                boolean isThirsty();
                                boolean isSuffocating();
                                boolean isDead();
                                float getGreyWaterProduced();
                                float getDirtyWaterProduced();
                                float getPotableWaterConsumed();
                                float getFoodConsumed();
                                float getCO2Produced();
                                float getO2Consumed();
				Activity getActivityByName(in string name);
                                Activity getScheduledActivityByOrder(in long order);
                        };
                        interface CrewGroup : framework::BioModule{
                                CrewPerson getCrewPerson(in string name);
                                CrewPerson createCrewPerson(in string name, in float age, in float weight, in Sex pSex);
                                CrewPersonList getCrewPeople();
				void scheduleRepair(in string moduleName, in long long malfunctionID, in long timeLength);
                                long getCrewSize();
                                float getGreyWaterProduced();
                                float getDirtyWaterProduced();
                                float getPotableWaterConsumed();
                                float getFoodConsumed();
                                float getCO2Produced();
                                float getO2Consumed();
                                boolean isDead();
                        };
                };

                module power{
                        interface PowerPS : framework::BioModule{
                                float getPowerProduced();
                        };
                        interface PowerStore : framework::Store{
                        };
                };

                module air{
                        interface AirRS : framework::BioModule{
                                float getPowerConsumed();
                                float getCO2Consumed();
                                float getO2Produced();
                                float getCO2Produced();
                                boolean VCCRHasPower();
                                boolean VCCRHasEnoughCO2();
                                boolean CRSHasPower();
                                boolean CRSHasEnoughCO2();
                                boolean CRSHasEnoughH2();
                                boolean OGSHasPower();
                                boolean OGSHasEnoughH2O();
                        };
                        interface O2Store : framework::Store{
                        };
                        interface CO2Store : framework::Store{
                        };

                        struct Breath{
                                float O2;
                                float CO2;
                                float other;
                        };
                };

                module food{
                        interface Shelf;
                        typedef sequence <Shelf> ShelfList;
                        interface BiomassRS : framework::BioModule{
                                ShelfList getShelves();
                                float getTotalPotableWaterConsumed();
                                float getTotalGreyWaterConsumed();
                                float getTotalPowerConsumed();
                                float getTotalPlantArea();
                                float getTotalBiomassProduced();
                                StringList getPlantTypes();
                                float getTotalO2Produced();
                                float getTotalCO2Consumed();
                        };
                        interface BiomassStore : framework::Store{
                        };
                        interface FoodProcessor : framework::BioModule{
                                float getBiomassConsumed();
                                float getPowerConsumed();
                                float getFoodProduced();
                                boolean hasPower();
                                boolean hasBiomass();
                        };
                        interface FoodStore : framework::Store{
                        };
                        interface Shelf{
                                float getArea();
                                float getPowerConsumed();
                                float getGreyWaterConsumed();
                                float getPotableWaterConsumed();
                                float getO2Produced();
                                float getCO2Consumed();
                                float getBiomassProduced();
                                boolean hasWater();
                                boolean hasLight();
                                boolean isDead();
                                boolean hasCO2();
                        };
                };

                module environment{
                        interface SimEnvironment : framework::BioModule{
                                void setCO2Level(in float liters);
                                void setO2Level(in float liters);
                                void setOtherLevel(in float liters);
                                void setCapacity(in float liters);
                                float getO2Level();
                                float getCO2Level();
                                float getOtherLevel();
                                float getTotalLevel();
                                float addCO2(in float liters);
                                float addO2(in float liters);
                                float addOther(in float liters);
                                float getLightIntensity();
                                air::Breath takeO2Breath(in float liters);
                                air::Breath takeCO2Breath(in float liters);
                                long getTicks();
                                void setTotalLevel(in float liters);
                        };
                };

                module water{
                        interface WaterRS : framework::BioModule{
                                float getPotableWaterProduced();
                                float getGreyWaterProduced();
                                float getPowerConsumed();
                                float getDirtyWaterConsumed();
                                float getGreyWaterConsumed();
                                void setROEnabled(in boolean pEnabled);
                                void setAESEnabled(in boolean pEnabled);
                                boolean ROIsEnabled();
                                boolean AESIsEnabled();
                                boolean ROHasPower();
                                boolean AESHasPower();
                                boolean PPSHasPower();
                                boolean BWPHasPower();
                                boolean ROHasWater();
                                boolean AESHasWater();
                                boolean PPSHasWater();
                                boolean BWPHasWater();
                                float getAEStoPPSWater();
                                float getROtoPPSWater();
                                float getROtoAESWater();
                                float getBWPtoROWater();
                                float getBWPtoAESWater();
                        };
                        interface PotableWaterStore : framework::Store{
                        };
                        interface GreyWaterStore : framework::Store{
                        };
                        interface DirtyWaterStore : framework::Store{
                        };
                };
        };
};
















