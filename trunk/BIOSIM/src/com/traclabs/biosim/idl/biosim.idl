//Prototyping
module biosim{
        module idl{
                typedef sequence <string> StringList;
                typedef sequence <float> FloatList;
                module simulation{
                        module power{
                                interface PowerPS;
                                interface PowerStore;
                                typedef sequence <PowerStore> PowerStoreList;
                        };
                        module crew{
                                interface Activity;
                                interface CrewPerson;
                                interface CrewGroup;
                                typedef sequence <CrewPerson> CrewPersonList;
                                enum Sex {male, female};
				enum ScheduleType{ACTIVE_SCHED, PASSIVE_SCHED, VACATION_SCHED};
                                interface Activity;
                                interface RepairActivity;
                                interface MaitenanceActivity;
                                interface CrewPerson;
                                interface CrewGroup;
                        };
                        module air{
                                interface AirRS;
                                interface O2Store;
                                interface CO2Store;
                                interface H2Store;
                                struct Breath{
                                        float O2;
                                        float CO2;
                                        float water;
                                        float other;
                                };
                                typedef sequence <O2Store> O2StoreList;
                                typedef sequence <CO2Store> CO2StoreList;
                                typedef sequence <H2Store> H2StoreList;
                        };
                        module food{
                                interface Shelf;
                                interface BiomassRS;
                                interface BiomassStore;
                                interface FoodProcessor;
                                interface FoodStore;
                                interface Shelf;
                                interface Plant;
                                enum PlantType {WHEAT, DRY_BEAN, LETTUCE, PEANUT, RICE, SOYBEAN, SWEET_POTATO, TOMATO, WHITE_POTATO};
                                struct BioMatter{
                                        float mass;
                                        PlantType type;
                                };
                                struct FoodMatter{
                                        float mass;
                                        PlantType type;
                                };
                                typedef sequence <Shelf> ShelfList;
                                typedef sequence <BiomassStore> BiomassStoreList;
                                typedef sequence <FoodStore> FoodStoreList;
                                typedef sequence <BioMatter> BioMatterList;
                                typedef sequence <FoodMatter> FoodMatterList;
                        };
                        module environment{
                                interface SimEnvironment;
                                typedef sequence <SimEnvironment> SimEnvironmentList;
                        };
                        module water{
                                interface WaterRS;
                                interface PotableWaterStore;
                                interface GreyWaterStore;
                                interface DirtyWaterStore;
                                typedef sequence <PotableWaterStore> PotableWaterStoreList;
                                typedef sequence <GreyWaterStore> GreyWaterStoreList;
                                typedef sequence <DirtyWaterStore> DirtyWaterStoreList;
                        };
                        module framework{
                                interface SimBioModule;
                                interface Injector;
                                interface Accumulator;
                                interface Store;
                        };
                };
                module util{
                        module log{
                                interface LogNode;
                                enum LogHandlerType {SCREEN,XML,FLAT,DB};
                                typedef sequence <LogHandlerType> LogHandlerTypeList;
                                interface Logger;
                                typedef sequence <LogNode> LogNodeList;
                        };
                };
                module framework{
                        enum BioDriverInit {DEFAULT_INIT, OPTIMAL_INIT, FLOWS_ONLY_INIT, NO_INIT};
                        enum StochasticIntensity {HIGH_STOCH, MEDIUM_STOCH, LOW_STOCH, NONE_STOCH};
                        enum MalfunctionIntensity {SEVERE_MALF, MEDIUM_MALF, LOW_MALF};
                        enum MalfunctionLength {TEMPORARY_MALF, PERMANENT_MALF};
                        interface Malfunction;
                        typedef sequence <Malfunction> MalfunctionList;
                        interface BioModule;
                        interface BioDriver;
                        //Producers & Consumers
			interface FlowRateControllable;
			interface Consumer;
			interface Producer;
                        interface PowerConsumer;
                        interface PowerProducer;
                        interface PotableWaterConsumer;
                        interface PotableWaterProducer;
                        interface GreyWaterConsumer;
                        interface GreyWaterProducer;
                        interface DirtyWaterConsumer;
                        interface DirtyWaterProducer;
                        interface AirConsumer;
                        interface AirProducer;
                        interface H2Consumer;
                        interface H2Producer;
                        interface O2AirConsumer;
                        interface O2AirProducer;
                        interface CO2AirConsumer;
                        interface CO2AirProducer;
                        interface O2Producer;
                        interface O2Consumer;
                        interface CO2Producer;
                        interface CO2Consumer;
                        interface LightConsumer;
                        interface BiomassConsumer;
                        interface FoodConsumer;
                        interface BiomassProducer;
                        interface FoodProducer;
                };
        };
};

//Declarations
module biosim{
        module idl{
                module framework{
                        interface Malfunction{
                                MalfunctionIntensity getIntensity();
                                long long getID();
                                string getName();
                                boolean hasPerformed();
                                void setPerformed(in boolean pPerformed);
                                MalfunctionLength getLength();
                                void repair();
                                boolean isRepaired();
                        };
                        interface BioModule{
                                void tick();
                                string getModuleName();
                                void reset();
                                void setLogging(in boolean pLogging);
                                boolean isLogging();
                                void setStochasticIntensity(in StochasticIntensity pIntensity);
                                StochasticIntensity getStochasticIntensity();
                                Malfunction startMalfunction(in MalfunctionIntensity pIntensity, in MalfunctionLength pLength);
                                void fixMalfunction(in long long id);
                                void fixAllMalfunctions();
                                void clearAllMalfunctions();
                                boolean isMalfunctioning();
                                StringList getMalfunctionNames();
                                MalfunctionList getMalfunctions();
                                void maitenance();
                                void repair(in long long id);
                                void clearMalfunction(in long long id);
                                void setEnableBreakdown(in boolean pValue);
                                boolean breakdownIsEnabled();
                        };
                        interface BioDriver{
                                boolean isPaused();
                                boolean isStarted();
				void configureSimulation();
                                void spawnSimulation();
                                void spawnSimulationAndRun();
                                void spawnSimulationAndRunTillDead();
                                void spawnSimulationAndRunTillN(in long nTicks);
                                void pauseSimulation();
                                void endSimulation();
                                boolean simulationHasStarted();
                                void advanceOneTick();
                                void resumeSimulation();
                                void setFullLogging(in boolean pLogSim);
                                boolean isFullLogging();
                                void setSensorLogging(in boolean pLogSim);
                                boolean isSensorLogging();
                                void setActuatorLogging(in boolean pLogSim);
                                boolean isActuatorLogging();
                                void setDriverPauseLength(in long pDriverPauseLength);
                                long getDriverPauseLength();
                                string getName();
                                boolean isDone();
                                long getTicks();
                                void reset();
                                boolean isLooping();
                                void setLooping(in boolean pLoop);
                                void setInitialization(in BioDriverInit myInit);
                                void setStochasticIntensity(in StochasticIntensity pIntensity);
                                void startMalfunction(in MalfunctionIntensity pIntensity, in MalfunctionLength pLength);
                        };
			interface FlowRateControllable : BioModule{};
			interface Consumer : FlowRateControllable{};
			interface Producer : FlowRateControllable{};
                        interface PowerConsumer : Consumer{
                                void setPowerInputMaxFlowRate(in float watts, in long index);
                                float getPowerInputMaxFlowRate(in long index);
                                void setPowerInputDesiredFlowRate(in float watts, in long index);
                                float getPowerInputDesiredFlowRate(in long index);
                                float getPowerInputActualFlowRate(in long index);
                                void setPowerInputs(in simulation::power::PowerStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::power::PowerStoreList getPowerInputs();
                        };
                        interface PowerProducer : Producer{
                                void setPowerOutputMaxFlowRate(in float watts, in long index);
                                float getPowerOutputMaxFlowRate(in long index);
                                void setPowerOutputDesiredFlowRate(in float watts, in long index);
                                float getPowerOutputDesiredFlowRate(in long index);
                                float getPowerOutputActualFlowRate(in long index);
                                void setPowerOutputs(in simulation::power::PowerStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::power::PowerStoreList getPowerOutputs();
                        };
                        interface PotableWaterConsumer : Consumer{
                                void setPotableWaterInputMaxFlowRate(in float liters, in long index);
                                float getPotableWaterInputMaxFlowRate(in long index);
                                void setPotableWaterInputDesiredFlowRate(in float liters, in long index);
                                float getPotableWaterInputDesiredFlowRate(in long index);
                                float getPotableWaterInputActualFlowRate(in long index);
                                void setPotableWaterInputs(in simulation::water::PotableWaterStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::water::PotableWaterStoreList getPotableWaterInputs();
                        };
                        interface GreyWaterConsumer : Consumer{
                                void setGreyWaterInputMaxFlowRate(in float liters, in long index);
                                float getGreyWaterInputMaxFlowRate(in long index);
                                void setGreyWaterInputDesiredFlowRate(in float liters, in long index);
                                float getGreyWaterInputDesiredFlowRate(in long index);
                                float getGreyWaterInputActualFlowRate(in long index);
                                void setGreyWaterInputs(in simulation::water::GreyWaterStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::water::GreyWaterStoreList getGreyWaterInputs();
                        };
                        interface DirtyWaterConsumer : Consumer{
                                void setDirtyWaterInputMaxFlowRate(in float liters, in long index);
                                float getDirtyWaterInputMaxFlowRate(in long index);
                                void setDirtyWaterInputDesiredFlowRate(in float liters, in long index);
                                float getDirtyWaterInputDesiredFlowRate(in long index);
                                float getDirtyWaterInputActualFlowRate(in long index);
                                void setDirtyWaterInputs(in simulation::water::DirtyWaterStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::water::DirtyWaterStoreList getDirtyWaterInputs();
                        };
                        interface PotableWaterProducer : Producer{
                                void setPotableWaterOutputMaxFlowRate(in float liters, in long index);
                                float getPotableWaterOutputMaxFlowRate(in long index);
                                void setPotableWaterOutputDesiredFlowRate(in float liters, in long index);
                                float getPotableWaterOutputDesiredFlowRate(in long index);
                                float getPotableWaterOutputActualFlowRate(in long index);
                                void setPotableWaterOutputs(in simulation::water::PotableWaterStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::water::PotableWaterStoreList getPotableWaterOutputs();
                        };
                        interface GreyWaterProducer : Producer{
                                void setGreyWaterOutputMaxFlowRate(in float liters, in long index);
                                float getGreyWaterOutputMaxFlowRate(in long index);
                                void setGreyWaterOutputDesiredFlowRate(in float liters, in long index);
                                float getGreyWaterOutputDesiredFlowRate(in long index);
                                float getGreyWaterOutputActualFlowRate(in long index);
                                void setGreyWaterOutputs(in simulation::water::GreyWaterStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::water::GreyWaterStoreList getGreyWaterOutputs();
                        };
                        interface DirtyWaterProducer : Producer{
                                void setDirtyWaterOutputMaxFlowRate(in float liters, in long index);
                                float getDirtyWaterOutputMaxFlowRate(in long index);
                                void setDirtyWaterOutputDesiredFlowRate(in float liters, in long index);
                                float getDirtyWaterOutputDesiredFlowRate(in long index);
                                float getDirtyWaterOutputActualFlowRate(in long index);
                                void setDirtyWaterOutputs(in simulation::water::DirtyWaterStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::water::DirtyWaterStoreList getDirtyWaterOutputs();
                        };
                        interface AirConsumer : Consumer{
                                void setAirInputMaxFlowRate(in float liters, in long index);
                                float getAirInputMaxFlowRate(in long index);
                                void setAirInputDesiredFlowRate(in float liters, in long index);
                                float getAirInputDesiredFlowRate(in long index);
                                float getAirInputActualFlowRate(in long index);
                                void setAirInputs(in simulation::environment::SimEnvironmentList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::environment::SimEnvironmentList getAirInputs();
                        };
                        interface LightConsumer : Consumer{
                                void setLightInput(in simulation::environment::SimEnvironment source);
                                simulation::environment::SimEnvironment getLightInput();
                        };
                        interface O2AirConsumer : Consumer{
                                void setO2AirStoreInputMaxFlowRate(in float liters, in long index);
                                void setO2AirEnvironmentInputMaxFlowRate(in float liters, in long index);
                                float getO2AirStoreInputMaxFlowRate(in long index);
                                float getO2AirEnvironmentInputMaxFlowRate(in long index);
                                void setO2AirStoreInputDesiredFlowRate(in float liters, in long index);
                                void setO2AirEnvironmentInputDesiredFlowRate(in float liters, in long index);
                                float getO2AirStoreInputDesiredFlowRate(in long index);
                                float getO2AirEnvironmentInputDesiredFlowRate(in long index);
                                float getO2AirStoreInputActualFlowRate(in long index);
                                float getO2AirEnvironmentInputActualFlowRate(in long index);
                                void setO2AirEnvironmentInputs(in simulation::environment::SimEnvironmentList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                void setO2AirStoreInputs(in simulation::air::O2StoreList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::O2StoreList getO2AirStoreInputs();
                                simulation::environment::SimEnvironmentList getO2AirEnvironmentInputs();
                        };
                        interface CO2AirConsumer : Consumer{
                                void setCO2AirStoreInputMaxFlowRate(in float liters, in long index);
                                void setCO2AirEnvironmentInputMaxFlowRate(in float liters, in long index);
                                float getCO2AirStoreInputMaxFlowRate(in long index);
                                float getCO2AirEnvironmentInputMaxFlowRate(in long index);
                                void setCO2AirStoreInputDesiredFlowRate(in float liters, in long index);
                                void setCO2AirEnvironmentInputDesiredFlowRate(in float liters, in long index);
                                float getCO2AirStoreInputDesiredFlowRate(in long index);
                                float getCO2AirEnvironmentInputDesiredFlowRate(in long index);
                                float getCO2AirStoreInputActualFlowRate(in long index);
                                float getCO2AirEnvironmentInputActualFlowRate(in long index);
                                void setCO2AirEnvironmentInputs(in simulation::environment::SimEnvironmentList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                void setCO2AirStoreInputs(in simulation::air::CO2StoreList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::CO2StoreList getCO2AirStoreInputs();
                                simulation::environment::SimEnvironmentList getCO2AirEnvironmentInputs();
                        };
                        interface AirProducer : Producer{
                                void setAirOutputMaxFlowRate(in float liters, in long index);
                                float getAirOutputMaxFlowRate(in long index);
                                void setAirOutputDesiredFlowRate(in float liters, in long index);
                                float getAirOutputDesiredFlowRate(in long index);
                                float getAirOutputActualFlowRate(in long index);
                                void setAirOutputs(in simulation::environment::SimEnvironmentList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::environment::SimEnvironmentList getAirOutputs();
                        };
                        interface O2AirProducer : Producer{
                                void setO2AirStoreOutputMaxFlowRate(in float liters, in long index);
                                void setO2AirEnvironmentOutputMaxFlowRate(in float liters, in long index);
                                float getO2AirStoreOutputMaxFlowRate(in long index);
                                float getO2AirEnvironmentOutputMaxFlowRate(in long index);
                                void setO2AirStoreOutputDesiredFlowRate(in float liters, in long index);
                                void setO2AirEnvironmentOutputDesiredFlowRate(in float liters, in long index);
                                float getO2AirStoreOutputDesiredFlowRate(in long index);
                                float getO2AirEnvironmentOutputDesiredFlowRate(in long index);
                                float getO2AirStoreOutputActualFlowRate(in long index);
                                float getO2AirEnvironmentOutputActualFlowRate(in long index);
                                void setO2AirEnvironmentOutputs(in simulation::environment::SimEnvironmentList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                void setO2AirStoreOutputs(in simulation::air::O2StoreList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::O2StoreList getO2AirStoreOutputs();
                                simulation::environment::SimEnvironmentList getO2AirEnvironmentOutputs();
                        };
                        interface CO2AirProducer : Producer{
                                void setCO2AirStoreOutputMaxFlowRate(in float liters, in long index);
                                void setCO2AirEnvironmentOutputMaxFlowRate(in float liters, in long index);
                                float getCO2AirStoreOutputMaxFlowRate(in long index);
                                float getCO2AirEnvironmentOutputMaxFlowRate(in long index);
                                void setCO2AirStoreOutputDesiredFlowRate(in float liters, in long index);
                                void setCO2AirEnvironmentOutputDesiredFlowRate(in float liters, in long index);
                                float getCO2AirStoreOutputDesiredFlowRate(in long index);
                                float getCO2AirEnvironmentOutputDesiredFlowRate(in long index);
                                float getCO2AirStoreOutputActualFlowRate(in long index);
                                float getCO2AirEnvironmentOutputActualFlowRate(in long index);
                                void setCO2AirEnvironmentOutputs(in simulation::environment::SimEnvironmentList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                void setCO2AirStoreOutputs(in simulation::air::CO2StoreList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::CO2StoreList getCO2AirStoreOutputs();
                                simulation::environment::SimEnvironmentList getCO2AirEnvironmentOutputs();
                        };
                        interface BiomassConsumer : Consumer{
                                void setBiomassInputMaxFlowRate(in float kilograms, in long index);
                                float getBiomassInputMaxFlowRate(in long index);
                                void setBiomassInputDesiredFlowRate(in float kilograms, in long index);
                                float getBiomassInputDesiredFlowRate(in long index);
                                float getBiomassInputActualFlowRate(in long index);
                                void setBiomassInputs(in simulation::food::BiomassStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::food::BiomassStoreList getBiomassInputs();
                        };

                        interface FoodConsumer : Consumer{
                                void setFoodInputMaxFlowRate(in float kilograms, in long index);
                                float getFoodInputMaxFlowRate(in long index);
                                void setFoodInputDesiredFlowRate(in float kilograms, in long index);
                                float getFoodInputDesiredFlowRate(in long index);
                                float getFoodInputActualFlowRate(in long index);
                                void setFoodInputs(in simulation::food::FoodStoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::food::FoodStoreList getFoodInputs();
                        };
                        interface BiomassProducer : Producer{
                                void setBiomassOutputMaxFlowRate(in float kilograms, in long index);
                                float getBiomassOutputMaxFlowRate(in long index);
                                void setBiomassOutputDesiredFlowRate(in float kilograms, in long index);
                                float getBiomassOutputDesiredFlowRate(in long index);
                                float getBiomassOutputActualFlowRate(in long index);
                                void setBiomassOutputs(in simulation::food::BiomassStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::food::BiomassStoreList getBiomassOutputs();
                        };
                        interface FoodProducer : Producer{
                                void setFoodOutputMaxFlowRate(in float kilograms, in long index);
                                float getFoodOutputMaxFlowRate(in long index);
                                void setFoodOutputDesiredFlowRate(in float kilograms, in long index);
                                float getFoodOutputDesiredFlowRate(in long index);
                                float getFoodOutputActualFlowRate(in long index);
                                void setFoodOutputs(in simulation::food::FoodStoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::food::FoodStoreList getFoodOutputs();
                        };
                        interface O2Consumer : Consumer{
                                void setO2InputMaxFlowRate(in float liters, in long index);
                                float getO2InputMaxFlowRate(in long index);
                                void setO2InputDesiredFlowRate(in float liters, in long index);
                                float getO2InputDesiredFlowRate(in long index);
                                float getO2InputActualFlowRate(in long index);
                                void setO2Inputs(in simulation::air::O2StoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::O2StoreList getO2Inputs();
                        };
                        interface O2Producer : Producer{
                                void setO2OutputMaxFlowRate(in float liters, in long index);
                                float getO2OutputMaxFlowRate(in long index);
                                void setO2OutputDesiredFlowRate(in float liters, in long index);
                                float getO2OutputDesiredFlowRate(in long index);
                                float getO2OutputActualFlowRate(in long index);
                                void setO2Outputs(in simulation::air::O2StoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::O2StoreList getO2Outputs();
                        }; 
			interface H2Consumer : Consumer{
                                void setH2InputMaxFlowRate(in float liters, in long index);
                                float getH2InputMaxFlowRate(in long index);
                                void setH2InputDesiredFlowRate(in float liters, in long index);
                                float getH2InputDesiredFlowRate(in long index);
                                float getH2InputActualFlowRate(in long index);
                                void setH2Inputs(in simulation::air::H2StoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::H2StoreList getH2Inputs();
                        };
                        interface H2Producer : Producer{
                                void setH2OutputMaxFlowRate(in float liters, in long index);
                                float getH2OutputMaxFlowRate(in long index);
                                void setH2OutputDesiredFlowRate(in float liters, in long index);
                                float getH2OutputDesiredFlowRate(in long index);
                                float getH2OutputActualFlowRate(in long index);
                                void setH2Outputs(in simulation::air::H2StoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::H2StoreList getH2Outputs();
                        };
                        interface CO2Consumer : Consumer{
                                void setCO2InputMaxFlowRate(in float liters, in long index);
                                float getCO2InputMaxFlowRate(in long index);
                                void setCO2InputDesiredFlowRate(in float liters, in long index);
                                float getCO2InputDesiredFlowRate(in long index);
                                float getCO2InputActualFlowRate(in long index);
                                void setCO2Inputs(in simulation::air::CO2StoreList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::CO2StoreList getCO2Inputs();
                        };
                        interface CO2Producer : Producer{
                                void setCO2OutputMaxFlowRate(in float liters, in long index);
                                float getCO2OutputMaxFlowRate(in long index);
                                void setCO2OutputDesiredFlowRate(in float liters, in long index);
                                float getCO2OutputDesiredFlowRate(in long index);
                                float getCO2OutputActualFlowRate(in long index);
                                void setCO2Outputs(in simulation::air::CO2StoreList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                                simulation::air::CO2StoreList getCO2Outputs();
                        };
                };
                module util{
                        module log{
                                interface Logger{
                                        void processLog(in LogNode thingToLog);
                                        LogHandlerTypeList getLogHandlerTypes();
                                        void addLogHandlerType(in LogHandlerType pLogType);
                                        void setProcessingLogs(in boolean pAllowLogging);
					void endLog();
                                        boolean isProcessingLogs();
                                        string getName();
                                };
                                interface LogNode{
                                        LogNode getHead();
                                        string getValue();
                                        void setValue(in string newValue);
                                        LogNode addChild (in string pChildName);
                                        LogNodeList getChildren();
                                        boolean hasChildren();
                                        LogNode getChildDeep(in string pName);
                                        LogNode getChildShallow(in string pName);
                                };
                        };
                };
                module simulation{
                        module framework{
                                interface Store : framework::BioModule{
                                        void setCapacity(in float metricAmount);
                                        void setLevel(in float metricAmount);
                                        float add(in float metricAmount);
                                        float take(in float metricAmount);
                                        float getLevel();
                                        float getCapacity();
                                        float getOverflow();
                                        boolean isPipe();
                                        void setPipe(in boolean pPipe);
                                };
                                interface SimBioModule : framework::BioModule{};
                                interface Injector : framework::SimBioModule, framework::PowerConsumer, framework::PotableWaterConsumer, framework::GreyWaterConsumer, framework::DirtyWaterConsumer, framework::O2Consumer, framework::CO2Consumer, framework::AirConsumer, framework::BiomassConsumer, framework::FoodConsumer, framework::O2AirConsumer, framework::CO2AirConsumer, framework::PowerProducer, framework::PotableWaterProducer, framework::GreyWaterProducer, framework::DirtyWaterProducer, framework::O2Producer, framework::CO2Producer, framework::AirProducer, framework::BiomassProducer, framework::FoodProducer, framework::O2AirProducer, framework::CO2AirProducer{};
                                interface Accumulator : framework::SimBioModule, framework::PowerConsumer, framework::PotableWaterConsumer, framework::GreyWaterConsumer, framework::DirtyWaterConsumer, framework::O2Consumer, framework::CO2Consumer, framework::AirConsumer, framework::BiomassConsumer, framework::FoodConsumer, framework::O2AirConsumer, framework::CO2AirConsumer, framework::PowerProducer, framework::PotableWaterProducer, framework::GreyWaterProducer, framework::DirtyWaterProducer, framework::O2Producer, framework::CO2Producer, framework::AirProducer, framework::BiomassProducer, framework::FoodProducer, framework::O2AirProducer, framework::CO2AirProducer{};
                        };
                        module crew{
                                interface Activity{
                                        string getName();
                                        long getTimeLength();
                                        long getActivityIntensity();
                                };
                                interface RepairActivity : Activity{
                                        string getModuleNameToRepair();
                                        long long getMalfunctionIDToRepair();
                                };
                                interface MaitenanceActivity : Activity{
                                        string getModuleToMaitenance();
                                };
                                interface CrewPerson{
                                        Activity getCurrentActivity();
                                        void setCurrentActivity(in Activity newActivity);
                                        long getOrderOfScheduledActivity(in string name);
                                        void insertActivityInSchedule(in Activity newActivity, in long order);
                                        void insertActivityInScheduleNow(in Activity newActivity);
                                        void sicken();
                                        string getName();
                                        float getAge();
                                        float getWeight();
                                        long getTimeActivityPerformed();
                                        Sex getSex();
                                        boolean isStarving();
                                        boolean isPoisoned();
                                        boolean isThirsty();
                                        boolean isSick();
                                        boolean isSuffocating();
                                        boolean isDead();
                                        float getGreyWaterProduced();
                                        float getDirtyWaterProduced();
                                        float getPotableWaterConsumed();
                                        float getFoodConsumed();
                                        float getCO2Produced();
                                        float getO2Consumed();
                                        Activity getActivityByName(in string name);
                                        Activity getScheduledActivityByOrder(in long order);
                                };
                                interface CrewGroup : framework::SimBioModule, framework::AirConsumer, framework::PotableWaterConsumer, framework::FoodConsumer, framework::AirProducer, framework::GreyWaterProducer, framework::DirtyWaterProducer{
                                        CrewPerson getCrewPerson(in string name);
                                        CrewPerson createCrewPerson(in string name, in float age, in float weight, in Sex pSex);
                                        CrewPersonList getCrewPeople();
                                        void scheduleRepair(in string moduleName, in long long malfunctionID, in long timeLength);
                                        void setSchedule(in ScheduleType pType);
					long getCrewSize();
                                        float getGreyWaterProduced();
                                        float getDirtyWaterProduced();
                                        float getPotableWaterConsumed();
                                        float getFoodConsumed();
                                        float getCO2Produced();
                                        float getO2Consumed();
                                        boolean isDead();
                                };
                        };

                        module environment{
                                interface SimEnvironment : framework::SimBioModule{
                                        void setCO2Moles(in float moles);
                                        void setO2Moles(in float moles);
                                        void setOtherMoles(in float moles);
                                        void setWaterMoles(in float moles);
                                        void setCO2Pressure(in float kPA);
                                        void setO2Pressure(in float kPA);
                                        void setOtherPressure(in float kPA);
                                        void setWaterPressure(in float kPA);
                                        void setInitialVolume(in float pInitialCO2Moles, in float pInitialO2Moles, in float pInitialOtherMoles, in float pInitialWaterMoles, in float pInitialVolume);
                                        void setInitialVolumeAtSeaLevel(in float pInitialVolume);
                                        float getO2Moles();
                                        float getCO2Moles();
                                        float getOtherMoles();
                                        float getWaterMoles();
                                        float getTotalMoles();
                                        float getO2Pressure();
                                        float getCO2Pressure();
                                        float getOtherPressure();
                                        float getWaterPressure();
                                        float getTotalPressure();
                                        float getRelativeHumidity();
                                        float getWaterDensity();
                                        float addCO2Moles(in float moles);
                                        float addO2Moles(in float moles);
                                        float addOtherMoles(in float moles);
                                        float addWaterMoles(in float moles);
                                        float takeCO2Moles(in float moles);
                                        float takeO2Moles(in float moles);
                                        float takeOtherMoles(in float moles);
                                        float takeWaterMoles(in float moles);
					air::Breath addBreath(in air::Breath pBreath);
                                        float getTemperature();
                                        float getLightIntensity();
                                        air::Breath takeAirMoles(in float moles);
                                        long getTicks();
                                        void setTotalMoles(in float moles);
                                        void setTotalPressure(in float moles);
                                };
                        };
                        module food{
                                interface BiomassRS : framework::SimBioModule, framework::PowerConsumer, framework::PotableWaterConsumer, framework::GreyWaterConsumer, framework::BiomassProducer, framework::AirConsumer, framework::AirProducer, framework::DirtyWaterProducer{
                                        ShelfList getShelves();
                                        Shelf createNewShelf(in PlantType pType, in float pCropArea);
                                };

                                interface FoodProcessor : framework::SimBioModule, framework::PowerConsumer, framework::BiomassConsumer, framework::FoodProducer{
                                        float getBiomassConsumed();
                                        float getPowerConsumed();
                                        float getFoodProduced();
                                        boolean hasPower();
                                        boolean hasBiomass();
                                };

                                interface FoodStore : framework::Store{
                                };

                                interface BiomassStore : framework::Store{
                                        float addBiomatter(in float mass, in PlantType type);
                                        BioMatterList takeBiomatterMass(in float mass);
                                        BioMatter takeBiomatterMassAndType(in float mass, in PlantType pType);
                                        BioMatter takeBiomatterType(in PlantType pType);
                                };

                                interface Shelf{
                                        void harvest();
                                        void replant(in PlantType pType);
					void setAutoHarvestEnabled(in boolean pHarvestEnabled);
					boolean isAutoHarvestEnabled();
                                };

                                interface Plant{
                                };

                        };
                        module power{
                                interface PowerPS : framework::SimBioModule, framework::PowerProducer, framework::LightConsumer{
                                        float getPowerProduced();
                                };
                                interface PowerStore : framework::Store{
                                };
                        };
                        module air{
                                interface AirRS : framework::SimBioModule, framework::PowerConsumer, framework::H2Consumer, framework::H2Producer, framework::AirConsumer, framework::AirProducer, framework::CO2Producer, framework::O2Producer, framework::CO2Consumer, framework::PotableWaterConsumer, framework::PotableWaterProducer{
                                        float getPowerConsumed();
                                        float getCO2Consumed();
                                        float getO2Produced();
                                        float getCO2Produced();
                                        boolean VCCRHasPower();
                                        boolean CRSHasPower();
                                        boolean OGSHasPower();
                                };
                                interface H2Store : framework::Store{
                                };
                                interface O2Store : framework::Store{
                                };
                                interface CO2Store : framework::Store{
                                };
                        };
                        module water{
                                interface WaterRS : framework::SimBioModule, framework::PowerConsumer, framework::GreyWaterConsumer, framework::DirtyWaterConsumer, framework::PotableWaterProducer{
                                        float getPotableWaterProduced();
                                        float getGreyWaterProduced();
                                        float getPowerConsumed();
                                        float getDirtyWaterConsumed();
                                        float getGreyWaterConsumed();
                                        void setROEnabled(in boolean pEnabled);
                                        void setAESEnabled(in boolean pEnabled);
                                        boolean ROIsEnabled();
                                        boolean AESIsEnabled();
                                        boolean ROHasPower();
                                        boolean AESHasPower();
                                        boolean PPSHasPower();
                                        boolean BWPHasPower();
                                        boolean ROHasWater();
                                        boolean AESHasWater();
                                        boolean PPSHasWater();
                                        boolean BWPHasWater();
                                        float getAEStoPPSWater();
                                        float getROtoPPSWater();
                                        float getROtoAESWater();
                                        float getBWPtoROWater();
                                        float getBWPtoAESWater();
                                };
                                interface PotableWaterStore : framework::Store{
                                };
                                interface GreyWaterStore : framework::Store{
                                };
                                interface DirtyWaterStore : framework::Store{
                                };
                        };
                };
                module sensor{
                        module framework{
                                interface GenericSensor : framework::BioModule{
                                        float getValue();
					float getMax();
					float getMin();
                                };
                        };
                        module air{
                                interface O2StoreSensor : framework::GenericSensor{
                                        void setInput(in simulation::air::O2Store source);
                                        simulation::air::O2Store getInput();
                                };
                                interface CO2StoreSensor : framework::GenericSensor{
                                        void setInput(in simulation::air::CO2Store source);
                                        simulation::air::CO2Store getInput();
                                };
                                interface H2StoreSensor : framework::GenericSensor{
                                        void setInput(in simulation::air::H2Store source);
                                        simulation::air::H2Store getInput();
                                };
                                interface AirRSSensor : framework::GenericSensor{
                                        void setInput(in simulation::air::AirRS source);
                                        simulation::air::AirRS getInput();
                                };
                                interface O2StoreLevelSensor : O2StoreSensor{};
                                interface H2StoreLevelSensor : H2StoreSensor{};
                                interface CO2StoreLevelSensor : CO2StoreSensor{};
                                interface O2InFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::O2Consumer pConsumer, in long pIndex);
                                        framework::O2Consumer getInput();
                                        long getIndex();
                                };
                                interface O2OutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::O2Producer pProducer, in long pIndex);
                                        framework::O2Producer getInput();
                                        long getIndex();
                                };
                                interface CO2InFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::CO2Consumer pConsumer, in long pIndex);
                                        framework::CO2Consumer getInput();
                                        long getIndex();
                                };
                                interface CO2OutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::CO2Producer pProducer, in long pIndex);
                                        framework::CO2Producer getInput();
                                        long getIndex();
                                };
                                interface H2InFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::H2Consumer pConsumer, in long pIndex);
                                        framework::H2Consumer getInput();
                                        long getIndex();
                                };
                                interface H2OutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::H2Producer pProducer, in long pIndex);
                                        framework::H2Producer getInput();
                                        long getIndex();
                                };
                        };
                        module crew{
                                interface CrewGroupSensor : framework::GenericSensor{
                                        void setInput(in simulation::crew::CrewGroup source);
                                        simulation::crew::CrewGroup getInput();
                                };
                                interface CrewGroupActivitySensor : CrewGroupSensor{};
				interface CrewGroupDeathSensor : CrewGroupSensor{};
                        };
                        module environment{
                                interface EnvironmentSensor : framework::GenericSensor{
                                        void setInput(in simulation::environment::SimEnvironment source);
                                        simulation::environment::SimEnvironment getInput();
                                };
                                interface LightLevelSensor : EnvironmentSensor{};
                                interface O2AirConcentrationSensor : EnvironmentSensor{};
                                interface CO2AirConcentrationSensor : EnvironmentSensor{};
                                interface OtherAirConcentrationSensor : EnvironmentSensor{};
                                interface WaterAirConcentrationSensor : EnvironmentSensor{};
                                interface O2AirPressureSensor : EnvironmentSensor{};
                                interface CO2AirPressureSensor : EnvironmentSensor{};
                                interface OtherAirPressureSensor : EnvironmentSensor{};
                                interface WaterAirPressureSensor : EnvironmentSensor{};

                                interface AirInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::AirConsumer pConsumer, in long pIndex);
                                        framework::AirConsumer getInput();
                                        long getIndex();
                                };
                                interface AirOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::AirProducer pProducer, in long pIndex);
                                        framework::AirProducer getInput();
                                        long getIndex();
                                };

                                interface O2AirStoreInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::O2AirConsumer pConsumer, in long pIndex);
                                        framework::O2AirConsumer getInput();
                                        long getIndex();
                                };
                                interface O2AirStoreOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::O2AirProducer pProducer, in long pIndex);
                                        framework::O2AirProducer getInput();
                                        long getIndex();
                                };
                                interface O2AirEnvironmentInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::O2AirConsumer pConsumer, in long pIndex);
                                        framework::O2AirConsumer getInput();
                                        long getIndex();
                                };
                                interface O2AirEnvironmentOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::O2AirProducer pProducer, in long pIndex);
                                        framework::O2AirProducer getInput();
                                        long getIndex();
                                };

                                interface CO2AirStoreInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::CO2AirConsumer pConsumer, in long pIndex);
                                        framework::CO2AirConsumer getInput();
                                        long getIndex();
                                };
                                interface CO2AirStoreOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::CO2AirProducer pProducer, in long pIndex);
                                        framework::CO2AirProducer getInput();
                                        long getIndex();
                                };
                                interface CO2AirEnvironmentInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::CO2AirConsumer pConsumer, in long pIndex);
                                        framework::CO2AirConsumer getInput();
                                        long getIndex();
                                };
                                interface CO2AirEnvironmentOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::CO2AirProducer pProducer, in long pIndex);
                                        framework::CO2AirProducer getInput();
                                        long getIndex();
                                };

                        };
                        module food{
                                interface BiomassStoreSensor : framework::GenericSensor{
                                        void setInput(in simulation::food::BiomassStore source);
                                        simulation::food::BiomassStore getInput();
                                };
                                interface BiomassStoreLevelSensor : BiomassStoreSensor{};
                                interface FoodStoreSensor : framework::GenericSensor{
                                        void setInput(in simulation::food::FoodStore source);
                                        simulation::food::FoodStore getInput();
                                };
                                interface FoodStoreLevelSensor : FoodStoreSensor{};

                                interface BiomassRSSensor : framework::GenericSensor{
                                        void setInput(in simulation::food::BiomassRS source);
                                        simulation::food::BiomassRS getInput();
                                };

                                interface FoodProcessorSensor : framework::GenericSensor{
                                        void setInput(in simulation::food::FoodProcessor source);
                                        simulation::food::FoodProcessor getInput();
                                };

                                interface BiomassInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::BiomassConsumer pConsumer, in long pIndex);
                                        framework::BiomassConsumer getInput();
                                        long getIndex();
                                };
                                interface BiomassOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::BiomassProducer pProducer, in long pIndex);
                                        framework::BiomassProducer getInput();
                                        long getIndex();
                                };

                                interface FoodInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::FoodConsumer pConsumer, in long pIndex);
                                        framework::FoodConsumer getInput();
                                        long getIndex();
                                };
                                interface FoodOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::FoodProducer pProducer, in long pIndex);
                                        framework::FoodProducer getInput();
                                        long getIndex();
                                };
                        };
                        module power{
                                interface PowerPSSensor : framework::GenericSensor{
                                        void setInput(in simulation::power::PowerPS source);
                                        simulation::power::PowerPS getInput();
                                };
                                interface PowerStoreSensor : framework::GenericSensor{
                                        void setInput(in simulation::power::PowerStore source);
                                        simulation::power::PowerStore getInput();
                                };
				
                                interface PowerStoreLevelSensor : PowerStoreSensor{};

                                interface PowerInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::PowerConsumer pConsumer, in long pIndex);
                                        framework::PowerConsumer getInput();
                                        long getIndex();
                                };
                                interface PowerOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::PowerProducer pProducer, in long pIndex);
                                        framework::PowerProducer getInput();
                                        long getIndex();
                                };
                        };
                        module water{
                                interface WaterRSSensor : framework::GenericSensor{
                                        void setInput(in simulation::water::WaterRS source);
                                        simulation::water::WaterRS getInput();
                                };
                                interface PotableWaterStoreSensor : framework::GenericSensor{
                                        void setInput(in simulation::water::PotableWaterStore source);
                                        simulation::water::PotableWaterStore getInput();
                                };
                                interface GreyWaterStoreSensor : framework::GenericSensor{
                                        void setInput(in simulation::water::GreyWaterStore source);
                                        simulation::water::GreyWaterStore getInput();
                                };
                                interface DirtyWaterStoreSensor : framework::GenericSensor{
                                        void setInput(in simulation::water::DirtyWaterStore source);
                                        simulation::water::DirtyWaterStore getInput();
                                };
                                interface PotableWaterStoreLevelSensor : PotableWaterStoreSensor{};
                                interface GreyWaterStoreLevelSensor : GreyWaterStoreSensor{};
                                interface DirtyWaterStoreLevelSensor : DirtyWaterStoreSensor{};

                                interface PotableWaterInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::PotableWaterConsumer pConsumer, in long pIndex);
                                        framework::PotableWaterConsumer getInput();
                                        long getIndex();
                                };
                                interface PotableWaterOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::PotableWaterProducer pProducer, in long pIndex);
                                        framework::PotableWaterProducer getInput();
                                        long getIndex();
                                };

                                interface GreyWaterInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::GreyWaterConsumer pConsumer, in long pIndex);
                                        framework::GreyWaterConsumer getInput();
                                        long getIndex();
                                };
                                interface GreyWaterOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::GreyWaterProducer pProducer, in long pIndex);
                                        framework::GreyWaterProducer getInput();
                                        long getIndex();
                                };

                                interface DirtyWaterInFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::DirtyWaterConsumer pConsumer, in long pIndex);
                                        framework::DirtyWaterConsumer getInput();
                                        long getIndex();
                                };
                                interface DirtyWaterOutFlowRateSensor : framework::GenericSensor{
                                        void setInput(in framework::DirtyWaterProducer pProducer, in long pIndex);
                                        framework::DirtyWaterProducer getInput();
                                        long getIndex();
                                };
                        };
                };
                module actuator{
                        module framework{
                                interface GenericActuator : framework::BioModule{
                                        void setValue(in float pValue);
                                        float getValue();
					float getMax();
					float getMin();
                                };
                        };
                        module air{
                                interface O2InFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::O2Consumer pConsumer, in long pIndex);
                                        framework::O2Consumer getOutput();
                                        long getIndex();
                                };
                                interface O2OutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::O2Producer pProducer, in long pIndex);
                                        framework::O2Producer getOutput();
                                        long getIndex();
                                };
                                interface CO2InFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::CO2Consumer pConsumer, in long pIndex);
                                        framework::CO2Consumer getOutput();
                                        long getIndex();
                                };
                                interface CO2OutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::CO2Producer pProducer, in long pIndex);
                                        framework::CO2Producer getOutput();
                                        long getIndex();
                                };
                                interface H2InFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::H2Consumer pConsumer, in long pIndex);
                                        framework::H2Consumer getOutput();
                                        long getIndex();
                                };
                                interface H2OutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::H2Producer pProducer, in long pIndex);
                                        framework::H2Producer getOutput();
                                        long getIndex();
                                };                                
				interface AirRSActuator : framework::GenericActuator{
                                        void setOutput(in simulation::air::AirRS source);
                                        simulation::air::AirRS getOutput();
                                };
                        };
                        module crew{
                                interface CrewGroupActuator : framework::GenericActuator{
                                        void setOutput(in simulation::crew::CrewGroup source);
                                        simulation::crew::CrewGroup getOutput();
                                };
                                interface CrewGroupActivityActuator : CrewGroupActuator{};
                        };
			
                        module environment{
                                interface EnvironmentActuator : framework::GenericActuator{
                                        void setOutput(in simulation::environment::SimEnvironment source);
                                        simulation::environment::SimEnvironment getOutput();
                                };
                                interface AirInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::AirConsumer pConsumer, in long pIndex);
                                        framework::AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface AirOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::AirProducer pProducer, in long pIndex);
                                        framework::AirProducer getOutput();
                                        long getIndex();
                                };

                                interface O2AirStoreInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::O2AirConsumer pConsumer, in long pIndex);
                                        framework::O2AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface O2AirStoreOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::O2AirProducer pProducer, in long pIndex);
                                        framework::O2AirProducer getOutput();
                                        long getIndex();
                                };
                                interface O2AirEnvironmentInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::O2AirConsumer pConsumer, in long pIndex);
                                        framework::O2AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface O2AirEnvironmentOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::O2AirProducer pProducer, in long pIndex);
                                        framework::O2AirProducer getOutput();
                                        long getIndex();
                                };

                                interface CO2AirStoreInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::CO2AirConsumer pConsumer, in long pIndex);
                                        framework::CO2AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface CO2AirStoreOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::CO2AirProducer pProducer, in long pIndex);
                                        framework::CO2AirProducer getOutput();
                                        long getIndex();
                                };
                                interface CO2AirEnvironmentInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::CO2AirConsumer pConsumer, in long pIndex);
                                        framework::CO2AirConsumer getOutput();
                                        long getIndex();
                                };
                                interface CO2AirEnvironmentOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::CO2AirProducer pProducer, in long pIndex);
                                        framework::CO2AirProducer getOutput();
                                        long getIndex();
                                };

                        };
                        module food{
                                interface BiomassRSActuator : framework::GenericActuator{
                                        void setOutput(in simulation::food::BiomassRS source);
                                        simulation::food::BiomassRS getOutput();
                                };

                                interface FoodProcessorActuator : framework::GenericActuator{
                                        void setOutput(in simulation::food::FoodProcessor source);
                                        simulation::food::FoodProcessor getOutput();
                                };

                                interface BiomassInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::BiomassConsumer pConsumer, in long pIndex);
                                        framework::BiomassConsumer getOutput();
                                        long getIndex();
                                };
                                interface BiomassOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::BiomassProducer pProducer, in long pIndex);
                                        framework::BiomassProducer getOutput();
                                        long getIndex();
                                };

                                interface FoodInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::FoodConsumer pConsumer, in long pIndex);
                                        framework::FoodConsumer getOutput();
                                        long getIndex();
                                };
                                interface FoodOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::FoodProducer pProducer, in long pIndex);
                                        framework::FoodProducer getOutput();
                                        long getIndex();
                                };
                        };
                        module power{
                                interface PowerPSActuator : framework::GenericActuator{
                                        void setOutput(in simulation::power::PowerPS source);
                                        simulation::power::PowerPS getOutput();
                                };

                                interface PowerInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::PowerConsumer pConsumer, in long pIndex);
                                        framework::PowerConsumer getOutput();
                                        long getIndex();
                                };
                                interface PowerOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::PowerProducer pProducer, in long pIndex);
                                        framework::PowerProducer getOutput();
                                        long getIndex();
                                };
                        };
                        module water{
                                interface WaterRSActuator : framework::GenericActuator{
                                        void setOutput(in simulation::water::WaterRS source);
                                        simulation::water::WaterRS getOutput();
                                };
                                interface PotableWaterInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::PotableWaterConsumer pConsumer, in long pIndex);
                                        framework::PotableWaterConsumer getOutput();
                                        long getIndex();
                                };
                                interface PotableWaterOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::PotableWaterProducer pProducer, in long pIndex);
                                        framework::PotableWaterProducer getOutput();
                                        long getIndex();
                                };

                                interface GreyWaterInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::GreyWaterConsumer pConsumer, in long pIndex);
                                        framework::GreyWaterConsumer getOutput();
                                        long getIndex();
                                };
                                interface GreyWaterOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::GreyWaterProducer pProducer, in long pIndex);
                                        framework::GreyWaterProducer getOutput();
                                        long getIndex();
                                };

                                interface DirtyWaterInFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::DirtyWaterConsumer pConsumer, in long pIndex);
                                        framework::DirtyWaterConsumer getOutput();
                                        long getIndex();
                                };
                                interface DirtyWaterOutFlowRateActuator : framework::GenericActuator{
                                        void setOutput(in framework::DirtyWaterProducer pProducer, in long pIndex);
                                        framework::DirtyWaterProducer getOutput();
                                        long getIndex();
                                };
                        };
                };
        };
};

