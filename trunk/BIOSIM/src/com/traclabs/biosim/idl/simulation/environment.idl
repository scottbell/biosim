module environment{
        interface SimEnvironment : framework::SimBioModule{
                void setCO2Moles(in float moles);
                void setO2Moles(in float moles);
                void setOtherMoles(in float moles);
                void setWaterMoles(in float moles);
                void setCO2Pressure(in float kPA);
                void setO2Pressure(in float kPA);
                void setOtherPressure(in float kPA);
                void setWaterPressure(in float kPA);
                void setVolume(in float liters);
                float getO2Moles();
                float getCO2Moles();
                float getOtherMoles();
                float getWaterMoles();
                float getTotalMoles();
                float getO2Pressure();
                float getCO2Pressure();
                float getOtherPressure();
                float getWaterPressure();
                float getTotalPressure();
                float addCO2(in float moles);
                float addO2(in float moles);
                float addOther(in float moles);
                float takeCO2(in float moles);
                float takeO2(in float moles);
                float takeOther(in float moles);
		float getTemperature();
                air::Breath addBreath(in air::Breath pBreath);
                float getLightIntensity();
                air::Breath takeO2Breath(in float moles);
                air::Breath takeCO2Breath(in float moles);
                air::Breath takeVolume(in float moles);
                long getTicks();
                void setTotalMoles(in float moles);
                void setTotalPressure(in float moles);
        };
	interface AirConsumer{
                void setAirInputMaxFlowRate(in float liters, in long index);
                float getAirInputMaxFlowRate(in long index);
                void setAirInputDesiredFlowRate(in float liters, in long index);
                float getAirInputDesiredFlowRate(in long index);
                float getAirInputActualFlowRate(in long index);
                void setAirInputs(in environment::SimEnvironmentList sources, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                environment::SimEnvironmentList getAirInputs();
        };
	interface LightConsumer{
                void setLightInput(in environment::SimEnvironment source);
                environment::SimEnvironment getLightInput();
        };
        interface O2AirConsumer{
                void setO2AirStoreInputMaxFlowRate(in float liters, in long index);
                void setO2AirEnvironmentInputMaxFlowRate(in float liters, in long index);
                float getO2AirStoreInputMaxFlowRate(in long index);
                float getO2AirEnvironmentInputMaxFlowRate(in long index);
                void setO2AirStoreInputDesiredFlowRate(in float liters, in long index);
                void setO2AirEnvironmentInputDesiredFlowRate(in float liters, in long index);
                float getO2AirStoreInputDesiredFlowRate(in long index);
                float getO2AirEnvironmentInputDesiredFlowRate(in long index);
                float getO2AirStoreInputActualFlowRate(in long index);
                float getO2AirEnvironmentInputActualFlowRate(in long index);
                void setO2AirEnvironmentInputs(in environment::SimEnvironmentList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                void setO2AirStoreInputs(in air::O2StoreList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                air::O2StoreList getO2AirStoreInputs();
                environment::SimEnvironmentList getO2AirEnvironmentInputs();
        };
        interface CO2AirConsumer{
                void setCO2AirStoreInputMaxFlowRate(in float liters, in long index);
                void setCO2AirEnvironmentInputMaxFlowRate(in float liters, in long index);
                float getCO2AirStoreInputMaxFlowRate(in long index);
                float getCO2AirEnvironmentInputMaxFlowRate(in long index);
                void setCO2AirStoreInputDesiredFlowRate(in float liters, in long index);
                void setCO2AirEnvironmentInputDesiredFlowRate(in float liters, in long index);
                float getCO2AirStoreInputDesiredFlowRate(in long index);
                float getCO2AirEnvironmentInputDesiredFlowRate(in long index);
                float getCO2AirStoreInputActualFlowRate(in long index);
                float getCO2AirEnvironmentInputActualFlowRate(in long index);
                void setCO2AirEnvironmentInputs(in environment::SimEnvironmentList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                void setCO2AirStoreInputs(in air::CO2StoreList source, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                air::CO2StoreList getCO2AirStoreInputs();
                environment::SimEnvironmentList getCO2AirEnvironmentInputs();
        };
	interface AirProducer{
                void setAirOutputMaxFlowRate(in float liters, in long index);
                float getAirOutputMaxFlowRate(in long index);
                void setAirOutputDesiredFlowRate(in float liters, in long index);
                float getAirOutputDesiredFlowRate(in long index);
                float getAirOutputActualFlowRate(in long index);
                void setAirOutputs(in environment::SimEnvironmentList destinations, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                environment::SimEnvironmentList getAirOutputs();
        };
	interface O2AirProducer{
                void setO2AirStoreOutputMaxFlowRate(in float liters, in long index);
                void setO2AirEnvironmentOutputMaxFlowRate(in float liters, in long index);
                float getO2AirStoreOutputMaxFlowRate(in long index);
                float getO2AirEnvironmentOutputMaxFlowRate(in long index);
                void setO2AirStoreOutputDesiredFlowRate(in float liters, in long index);
                void setO2AirEnvironmentOutputDesiredFlowRate(in float liters, in long index);
                float getO2AirStoreOutputDesiredFlowRate(in long index);
                float getO2AirEnvironmentOutputDesiredFlowRate(in long index);
                float getO2AirStoreOutputActualFlowRate(in long index);
                float getO2AirEnvironmentOutputActualFlowRate(in long index);
                void setO2AirEnvironmentOutputs(in environment::SimEnvironmentList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                void setO2AirStoreOutputs(in air::O2StoreList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                air::O2StoreList getO2AirStoreOutputs();
                environment::SimEnvironmentList getO2AirEnvironmentOutputs();
        };
        interface CO2AirProducer{
                void setCO2AirStoreOutputMaxFlowRate(in float liters, in long index);
                void setCO2AirEnvironmentOutputMaxFlowRate(in float liters, in long index);
                float getCO2AirStoreOutputMaxFlowRate(in long index);
                float getCO2AirEnvironmentOutputMaxFlowRate(in long index);
                void setCO2AirStoreOutputDesiredFlowRate(in float liters, in long index);
                void setCO2AirEnvironmentOutputDesiredFlowRate(in float liters, in long index);
                float getCO2AirStoreOutputDesiredFlowRate(in long index);
                float getCO2AirEnvironmentOutputDesiredFlowRate(in long index);
                float getCO2AirStoreOutputActualFlowRate(in long index);
                float getCO2AirEnvironmentOutputActualFlowRate(in long index);
                void setCO2AirEnvironmentOutputs(in environment::SimEnvironmentList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                void setCO2AirStoreOutputs(in air::CO2StoreList destination, in FloatList maxFlowRates, in FloatList desiredFlowRates);
                air::CO2StoreList getCO2AirStoreOutputs();
                environment::SimEnvironmentList getCO2AirEnvironmentOutputs();
        };
};
