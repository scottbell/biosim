module framework{
        interface Store : framework::BioModule{
                void setCapacity(in float metricAmount);
                void setLevel(in float metricAmount);
                float add(in float metricAmount);
                float take(in float metricAmount);
                float getLevel();
                float getCapacity();
        };
	interface Injector : framework::BioModule, PowerConsumer, PotableWaterConsumer, GreyWaterConsumer, DirtyWaterConsumer, O2Consumer, CO2Consumer, AirConsumer, BiomassConsumer, FoodConsumer, O2AirConsumer, CO2AirConsumer, PowerProducer, PotableWaterProducer, GreyWaterProducer, DirtyWaterProducer, O2Producer, CO2Producer, AirProducer, BiomassProducer, FoodProducer, O2AirProducer, CO2AirProducer{
	};
	interface Accumulator : framework::BioModule, PowerConsumer, PotableWaterConsumer, GreyWaterConsumer, DirtyWaterConsumer, O2Consumer, CO2Consumer, AirConsumer, BiomassConsumer, FoodConsumer, O2AirConsumer, CO2AirConsumer, PowerProducer, PotableWaterProducer, GreyWaterProducer, DirtyWaterProducer, O2Producer, CO2Producer, AirProducer, BiomassProducer, FoodProducer, O2AirProducer, CO2AirProducer{
	};
        interface PowerConsumer{
                void setPowerInputFlowrate(in float watts, in long index);
                float getPowerInputFlowrate(in long index);
                void setPowerInputs(in ::power::PowerStoreList sources, in FloatList flowRates);
		power::PowerStoreList getPowerInputs();
        };
        interface PotableWaterConsumer{
                void setPotableWaterInputFlowrate(in float liters, in long index);
                float getPotableWaterInputFlowrate(in long index);
                void setPotableWaterInputs(in water::PotableWaterStoreList sources, in FloatList flowRates);
		water::PotableWaterStoreList getPotableWaterInputs();
        };
        interface GreyWaterConsumer{
                void setGreyWaterInputFlowrate(in float liters, in long index);
                float getGreyWaterInputFlowrate(in long index);
                void setGreyWaterInputs(in water::GreyWaterStoreList sources, in FloatList flowRates);
		water::GreyWaterStoreList getGreyWaterInputs();
        };
        interface DirtyWaterConsumer{
                void setDirtyWaterInputFlowrate(in float liters, in long index);
                float getDirtyWaterInputFlowrate(in long index);
                void setDirtyWaterInputs(in water::DirtyWaterStoreList sources, in FloatList flowRates);
		water::DirtyWaterStoreList getDirtyWaterInputs();
        };
        interface O2Consumer{
                void setO2InputFlowrate(in float liters, in long index);
                float getO2InputFlowrate(in long index);
                void setO2Inputs(in air::O2StoreList sources, in FloatList flowRates);
		air::O2StoreList getO2Inputs();
        };
        interface CO2Consumer{
                void setCO2InputFlowrate(in float liters, in long index);
                float getCO2InputFlowrate(in long index);
                void setCO2Inputs(in air::CO2StoreList sources, in FloatList flowRates);
		air::CO2StoreList getCO2Inputs();
        };
        interface AirConsumer{
                void setAirInputFlowrate(in float liters, in long index);
                float getAirInputFlowrate(in long index);
                void setAirInputs(in environment::SimEnvironmentList sources, in FloatList flowRates);
		environment::SimEnvironmentList getAirInputs();
        };
        interface BiomassConsumer{
                void setBiomassInputFlowrate(in float kilograms, in long index);
                float getBiomassInputFlowrate(in long index);
                void setBiomassInputs(in food::BiomassStoreList sources, in FloatList flowRates);
		food::BiomassStoreList getBiomassInputs();
        };
        interface FoodConsumer{
                void setFoodInputFlowrate(in float kilograms, in long index);
                float getFoodInputFlowrate(in long index);
                void setFoodInputs(in food::FoodStoreList sources, in FloatList flowRates);
		food::FoodStoreList getFoodInputs();
        };
	interface PowerProducer{
                void setPowerOutputFlowrate(in float watts, in long index);
                float getPowerOutputFlowrate(in long index);
                void setPowerOutputs(in ::power::PowerStoreList destinations, in FloatList flowRates);
		power::PowerStoreList getPowerOutputs();
        };
        interface PotableWaterProducer{
                void setPotableWaterOutputFlowrate(in float liters, in long index);
                float getPotableWaterOutputFlowrate(in long index);
                void setPotableWaterOutputs(in water::PotableWaterStoreList destinations, in FloatList flowRates);
		water::PotableWaterStoreList getPotableWaterOutputs();
        };
        interface GreyWaterProducer{
                void setGreyWaterOutputFlowrate(in float liters, in long index);
                float getGreyWaterOutputFlowrate(in long index);
                void setGreyWaterOutputs(in water::GreyWaterStoreList destinations, in FloatList flowRates);
		water::GreyWaterStoreList getGreyWaterOutputs();
        };
        interface DirtyWaterProducer{
                void setDirtyWaterOutputFlowrate(in float liters, in long index);
                float getDirtyWaterOutputFlowrate(in long index);
                void setDirtyWaterOutputs(in water::DirtyWaterStoreList destinations, in FloatList flowRates);
		water::DirtyWaterStoreList getDirtyWaterOutputs();
        };
        interface O2Producer{
                void setO2OutputFlowrate(in float liters, in long index);
                float getO2OutputFlowrate(in long index);
                void setO2Outputs(in air::O2StoreList destinations, in FloatList flowRates);
		air::O2StoreList getO2Outputs();
        };
        interface CO2Producer{
                void setCO2OutputFlowrate(in float liters, in long index);
                float getCO2OutputFlowrate(in long index);
                void setCO2Outputs(in air::CO2StoreList destinations, in FloatList flowRates);
		air::CO2StoreList getCO2Outputs();
        };
        interface AirProducer{
                void setAirOutputFlowrate(in float liters, in long index);
                float getAirOutputFlowrate(in long index);
                void setAirOutputs(in environment::SimEnvironmentList destinations, in FloatList flowRates);
		environment::SimEnvironmentList getAirOutputs();
        };
        interface BiomassProducer{
                void setBiomassOutputFlowrate(in float kilograms, in long index);
                float getBiomassOutputFlowrate(in long index);
                void setBiomassOutputs(in food::BiomassStoreList destinations, in FloatList flowRates);
		food::BiomassStoreList getBiomassOutputs();
        };
        interface FoodProducer{
                void setFoodOutputFlowrate(in float kilograms, in long index);
                float getFoodOutputFlowrate(in long index);
                void setFoodOutputs(in food::FoodStoreList destinations, in FloatList flowRates);
		food::FoodStoreList getFoodOutputs();
        };
	interface LightConsumer{
                void setLightInput(in environment::SimEnvironment source);
		environment::SimEnvironment getLightInput();
        };
	interface O2AirConsumer{
                void setO2AirStoreInputFlowrate(in float liters, in long index);
                void setO2AirEnvironmentInputFlowrate(in float liters, in long index);
                float getO2AirStoreInputFlowrate(in long index);
                float getO2AirEnvironmentInputFlowrate(in long index);
                void setO2AirEnvironmentInputs(in environment::SimEnvironmentList source, in FloatList flowRates);
                void setO2AirStoreInputs(in air::O2StoreList source, in FloatList flowRates);
		air::O2StoreList getO2AirStoreInputs();
		environment::SimEnvironmentList getO2AirEnvironmentInputs();
        };
	interface CO2AirConsumer{
                void setCO2AirStoreInputFlowrate(in float liters, in long index);
                void setCO2AirEnvironmentInputFlowrate(in float liters, in long index);
                float getCO2AirStoreInputFlowrate(in long index);
                float getCO2AirEnvironmentInputFlowrate(in long index);
                void setCO2AirEnvironmentInputs(in environment::SimEnvironmentList source, in FloatList flowRates);
                void setCO2AirStoreInputs(in air::CO2StoreList source, in FloatList flowRates);
		air::CO2StoreList getCO2AirStoreInputs();
		environment::SimEnvironmentList getCO2AirEnvironmentInputs();
        };
	interface O2AirProducer{
                void setO2AirStoreOutputFlowrate(in float liters, in long index);
                void setO2AirEnvironmentOutputFlowrate(in float liters, in long index);
                float getO2AirStoreOutputFlowrate(in long index);
                float getO2AirEnvironmentOutputFlowrate(in long index);
                void setO2AirEnvironmentOutputs(in environment::SimEnvironmentList destination, in FloatList flowRates);
                void setO2AirStoreOutputs(in air::O2StoreList destination, in FloatList flowRates);
		air::O2StoreList getO2AirStoreOutputs();
		environment::SimEnvironmentList getO2AirEnvironmentOutputs();
        };
	interface CO2AirProducer{
                void setCO2AirStoreOutputFlowrate(in float liters, in long index);
                void setCO2AirEnvironmentOutputFlowrate(in float liters, in long index);
                float getCO2AirStoreOutputFlowrate(in long index);
                float getCO2AirEnvironmentOutputFlowrate(in long index);
                void setCO2AirEnvironmentOutputs(in environment::SimEnvironmentList destination, in FloatList flowRates);
                void setCO2AirStoreOutputs(in air::CO2StoreList destination, in FloatList flowRates);
		air::CO2StoreList getCO2AirStoreOutputs();
		environment::SimEnvironmentList getCO2AirEnvironmentOutputs();
        };
};
