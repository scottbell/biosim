// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

#if defined (ACE_HAS_USING_KEYWORD)

template <class T> ACE_INLINE
POA_biosim::idl::framework::BioDriver_tie<T>::BioDriver_tie (T &t)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_biosim::idl::framework::BioDriver_tie<T>::BioDriver_tie (T &t, PortableServer::POA_ptr poa)
	: ptr_ (&t),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (0)
{}

template <class T> ACE_INLINE
POA_biosim::idl::framework::BioDriver_tie<T>::BioDriver_tie (T *tp, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_nil ()),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_biosim::idl::framework::BioDriver_tie<T>::BioDriver_tie (T *tp, PortableServer::POA_ptr poa, CORBA::Boolean release)
	: ptr_ (tp),
	  poa_ (PortableServer::POA::_duplicate (poa)),
	  rel_ (release)
{}

template <class T> ACE_INLINE
POA_biosim::idl::framework::BioDriver_tie<T>::~BioDriver_tie (void)
{
  if (this->rel_) delete this->ptr_;
}

template <class T> ACE_INLINE T *
POA_biosim::idl::framework::BioDriver_tie<T>::_tied_object (void)
{
  return this->ptr_;
}

template <class T> ACE_INLINE void
POA_biosim::idl::framework::BioDriver_tie<T>::_tied_object (T &obj)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = &obj;
  this->rel_ = 0;
}

template <class T> ACE_INLINE void
POA_biosim::idl::framework::BioDriver_tie<T>::_tied_object (T *obj, CORBA::Boolean release)
{
  if (this->rel_) delete this->ptr_;
  this->ptr_ = obj;
  this->rel_ = release;
}

template <class T> ACE_INLINE CORBA::Boolean
POA_biosim::idl::framework::BioDriver_tie<T>::_is_owner (void)
{
  return this->rel_;
}

template <class T> ACE_INLINE void
POA_biosim::idl::framework::BioDriver_tie<T>::_is_owner (CORBA::Boolean b)
{
  this->rel_ = b;
}

template <class T> ACE_INLINE PortableServer::POA_ptr
POA_biosim::idl::framework::BioDriver_tie<T>::_default_POA (CORBA::Environment &ACE_TRY_ENV)
{
  if (!CORBA::is_nil (this->poa_.in ()))
    return PortableServer::POA::_duplicate (this->poa_.in ());

  return this->BioDriver::_default_POA (ACE_TRY_ENV);
}

template <class T> ACE_INLINE
CORBA::Boolean POA_biosim::idl::framework::BioDriver_tie<T>::isPaused  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->isPaused (

  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_biosim::idl::framework::BioDriver_tie<T>::isStarted  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->isStarted (

  );
}

template <class T> ACE_INLINE
void POA_biosim::idl::framework::BioDriver_tie<T>::spawnSimulation  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->spawnSimulation (

  );
}

template <class T> ACE_INLINE
void POA_biosim::idl::framework::BioDriver_tie<T>::spawnSimulationTillDead  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->spawnSimulationTillDead (

  );
}

template <class T> ACE_INLINE
void POA_biosim::idl::framework::BioDriver_tie<T>::spawnSimulationTillN  (
    CORBA::Long nTicks
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->spawnSimulationTillN (
nTicks
  );
}

template <class T> ACE_INLINE
void POA_biosim::idl::framework::BioDriver_tie<T>::pauseSimulation  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->pauseSimulation (

  );
}

template <class T> ACE_INLINE
void POA_biosim::idl::framework::BioDriver_tie<T>::endSimulation  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->endSimulation (

  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_biosim::idl::framework::BioDriver_tie<T>::simulationHasStarted  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->simulationHasStarted (

  );
}

template <class T> ACE_INLINE
void POA_biosim::idl::framework::BioDriver_tie<T>::advanceOneTick  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->advanceOneTick (

  );
}

template <class T> ACE_INLINE
void POA_biosim::idl::framework::BioDriver_tie<T>::resumeSimulation  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->resumeSimulation (

  );
}

template <class T> ACE_INLINE
void POA_biosim::idl::framework::BioDriver_tie<T>::setLogging  (
    CORBA::Boolean pLogSim
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->setLogging (
pLogSim
  );
}

template <class T> ACE_INLINE
CORBA::Boolean POA_biosim::idl::framework::BioDriver_tie<T>::isLogging  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->isLogging (

  );
}

template <class T> ACE_INLINE
void POA_biosim::idl::framework::BioDriver_tie<T>::setDriverPauseLength  (
    CORBA::Long pDriverPauseLength
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  this->ptr_->setDriverPauseLength (
pDriverPauseLength
  );
}

template <class T> ACE_INLINE
CORBA::Long POA_biosim::idl::framework::BioDriver_tie<T>::getDriverPauseLength  (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return this->ptr_->getDriverPauseLength (

  );
}

#endif /* ACE_HAS_USING_KEYWORD */

